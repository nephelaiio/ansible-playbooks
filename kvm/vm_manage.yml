---
- name: register image temp directory
  tempfile:
    state: directory
    suffix: images
  register: img_dir
  changed_when: false
  delegate_to: "{{ groups['kvm_hosts'] | first }}"

- block:

    - name: build vm profile definitions
      set_fact:
        kvm_profile: "{{ kvm_profiles[kvm_profile | default(kvm_profile_default)] | combine(dict(hostvars[inventory_hostname]), recursive=true) }}"

    - name: build vm pool definition
      set_fact:
        pool: "{{ kvm_pools[pool | default(kvm_profile.pool)].path }}"

    - name: build vm img and iso definitions
      set_fact:
        iso: "{{ kvm_pools[kvm_profile.pool].path }}/cloud_init_{{ guest_name }}.iso"
        img: "{{ kvm_images[kvm_image | default(kvm_image_default)] }}"

    - block:

        - name: destroy vm
          virt:
            name: "{{ guest_name }}"
            command: destroy
          failed_when: false

        - name: undefine vm
          virt:
            name: "{{ guest_name }}"
            command: undefine
          failed_when: false

        - name: delete vm disk
          file:
            path: "{{ kvm_profile.pool }}/{{ guest_name }}.img"
            state: absent
          become: yes
          when: pool is defined

        - name: delete vm cloud image disk
          file:
            path: "{{ iso }}"
            state: absent
          become: yes
          when: iso is defined

        - name: delete vm qemu definitions
          file:
            path: "{{ qemudefitem }}"
            state: absent
          loop_control:
            loop_var: qemudefitem
          with_items:
            - "/etc/libvirt/qemu/{{ guest_name }}.xml"
            - "/etc/libvirt/qemu/autostart/{{ guest_name }}.xml"
            - "/var/lib/libvirt/images/cloud_init_{{ guest_name }}.xml"
            - "/var/lib/libvirt/images/cloud_init_{{ guest_name }}.iso"
            - "/var/lib/libvirt/images/{{ guest_name }}.img"
          become: yes

      when:
        - kvm_state | default(kvm_profile.state) in ['absent', 'recreate']

    - name: list vms
      virt:
        command: list_vms
      register: vmlist_query

    - block:

        - name: create temporary directory
          tempfile:
            state: directory
            prefix: kvm_{{ guest_name }}_
          register: tmpdir
          changed_when: False
          become: no

        - name: set vm target disk path var
          set_fact:
            local_vm_img: "/tmp/{{ img.url | basename }}"
            vm_img: "{{ tmpdir.path }}/{{ img.url | basename }}"
            vm_disk: "{{ pool | default(kvm_profile.pool) }}/{{ guest_name }}.img"

        - name: fetch vm image
          get_url:
            url: "{{ img.url }}"
            dest: "{{ local_vm_img }}"
            mode: 0666
            timeout: 60
          register: fetch_image
          retries: 5

        - name: copy vm image
          copy:
            src: "/tmp/{{ img.url | basename }}"
            dest: "{{ tmpdir.path }}/{{ img.url | basename }}"
            remote_src: yes

        - name: extract vm image
          command: "xz -k -d {{ vm_img }}"
          changed_when: false
          when: vm_img is match(".*\.xz")

        - name: register vm image path
          command: basename {{ vm_img }} .xz
          register: img_filename
          changed_when: false

        - name: uncompress vm image
          command: "qemu-img convert -O {{ format }} {{ source }} {{ target }}"
          args:
            chdir: "{{ img_dir.path }}"
            creates: "{{ target }}"
          vars:
            format: "{{ img.format }}"
            source: "{{ vm_img | dirname }}/{{ img_filename.stdout }}"
            target: "{{ vm_disk }}"
          register: diskcopy

        - name: resize vm disk
          command: "qemu-img resize {{ disk }} {{ size | default(kvm_profile.size) }}"
          vars:
            disk: "{{ vm_disk }}"
          when: diskcopy.changed

        - name: register password salt
          set_fact:
            pass_salt: salt

        - name: create vm cloud image user data
          template:
            src: "user-data-{{ image }}.yml.j2"
            dest: "{{ tmpdir.path }}/user-data"
          vars:
            ssh_user: "{{ ansible_guest_username }}"
            ssh_pass: "{{ ansible_guest_password | password_hash('sha512') }}"
            ssh_key: "{{ ansible_guest_ssh_key }}"
            hostname: "{{ guest_name }}"
            fqdn: "{{ inventory_hostname }}"
            ubuntu_mirror_host: "{{ ubuntu_mirror | default('') }}"
            yum_mirror_host: "{{ centos_mirror | default('') }}"
            epel_mirror_host: "{{ epel_mirror | default('') }}"
            image: "{{ kvm_image }}"
          when: diskcopy.changed
          become: no

        - name: create vm ubuntu cloud image network config
          copy:
            content: "{{ network_config }}"
            dest: "{{ tmpdir.path }}/network-config"
          vars:
            network_profile: "{{ nets[kvm_profile.network] }}"
            network_prefix: "{{ (network_profile.network + '/' + network_profile.netmask) | ipaddr('prefix') | ipaddr('prefix') }}"
            network_config: |
              version: 2
              ethernets:
                enp0s3:
                  match:
                    macaddress: {{ kvm_profile.hw_address }}
                  dhcp4: {{ kvm_profile.dhcp }}
                  addresses:
                    - {{ kvm_profile.ansible_host }}/24
                  gateway4: {{ network_profile.router }}
                  nameservers:
                    search:
                      - {{ base_domain }}
                    addresses: {{ (nameservers | default(network_profile.ns)) | to_yaml }}
          when:
            - img.netconf_ver | int == 2
            - diskcopy.changed
          become: no

        - name: create vm centos cloud image static network config
          copy:
            content: "{{ network_config }}"
            dest: "{{ tmpdir.path }}/network-config"
          vars:
            network_profile: "{{ nets[kvm_profile.network] }}"
            network_prefix: "{{ (network_profile.network + '/' + network_profile.netmask) | ipaddr('prefix') | ipaddr('prefix') }}"
            network_config: |
              version: 1
              config:
                - type: physical
                  name: eth0
                  mac_address: {{ kvm_profile.hw_address }}
                  subnets:
                    - type: static
                      address: {{ kvm_profile.ansible_host }}/24
                      gateway: {{ network_profile.router }}
                      dns_nameservers: {{ (nameservers | default(network_profile.ns)) | to_yaml }}
                      dns_search:
                        - {{ base_domain }}
          when:
            - img.netconf_ver | int == 1
            - diskcopy.changed
            - not kvm_profile.dhcp
          become: no

        - name: create vm centos cloud image static network config
          fail:
          when:
            - img.netconf_ver | int == 1
            - diskcopy.changed
            - kvm_profile.dhcp
          become: no

        - name: create vm cloud image meta data
          template:
            src: meta-data.yml.j2
            dest: "{{ tmpdir.path }}/meta-data"
          vars:
            instance_id: "{{ guest_name }}"
            hostname: "{{ guest_name }}"
            fqdn: "{{ inventory_hostname }}"
          when: diskcopy.changed
          become: no

        - name: create vm cloud image iso
          command: genisoimage -output {{ iso }} -volid cidata -joliet -r meta-data user-data network-config
          args:
            chdir: "{{ tmpdir.path }}"
          when: diskcopy.changed

        - name: set vm definition path
          set_fact:
            domain_def: "{{ tmpdir.path }}/vm_{{ guest_name }}.xml"

        - name: create vm template
          template:
            src: vm.xml.j2
            dest: "{{ domain_def }}"
          vars:
            disk: "{{ vm_disk }}"
            profile: "{{ kvm_profile }}"
            bridge: "{{ nets[kvm_profile.network].bridge }}"
            image_format: "{{ img.format }}"
          become: no

        - name: get vm template contents
          slurp:
            src: "{{ domain_def }}"
          register: domain

        - name: create vm
          virt:
            command: define
            xml: "{{ domain['content'] | b64decode }}"
          when: diskcopy.changed

        - name: manage vm
          virt:
            name: "{{ guest_name }}"
            state: "{{ kvm_state | default(kvm_profile.state) | regex_replace('recreate', 'running') | regex_replace('present', 'running') }}"
            xml: "{{ domain['content'] | b64encode }}"

        - name: autostart vm
          command: "virsh -c qemu:///system autostart {{ guest_name }}"
          changed_when: false
          when: autostart | default(kvm_profile.autostart)

        - name: remove temporary directory
          file:
            path: "{{ tmpdir.path }}"
            state: absent
          changed_when: false
          become: no

      when:
        - kvm_state | default(kvm_profile.state) in ['present', 'recreate', 'running']
        - guest_name not in vmlist_query.list_vms

  when:
    - inventory_hostname is defined
    - ansible_host is defined
  delegate_to: "{{ groups['kvm_hosts'] | first }}"

- name: delete image temp directory
  file:
    path: "{{ img_dir.path }}"
    state: absent
  register: img_dir
  changed_when: false
  delegate_to: "{{ groups['kvm_hosts'] | first }}"
