---
- name: create temporary directory
  tempfile:
    state: directory
    prefix: kvm_{{ vm.name }}_
  register: tmpdir
  changed_when: False
  become: no

- name: set target disk path var
  set_fact:
    vm_img: "{{ tmpdir.path }}/{{ img.url | basename }}"
    vm_disk: "{{ pool }}/{{ vm.name }}.img"

- name: fetch image
  get_url:
    url: "{{ img.url }}"
    dest: "{{ vm_img }}"
    mode: 0666

- name: uncompress image
  command: "qemu-img convert -O {{ format }} {{ source }} {{ target }}"
  args:
    chdir: "{{ img_dir }}"
    creates: "{{ target }}"
  vars:
    format: "{{ img.format }}"
    source: "{{ vm_img }}"
    target: "{{ vm_disk }}"
  register: diskcopy

- name: resize vm disk
  command: "qemu-img resize {{ disk }} {{ vm.size }}"
  vars:
    disk: "{{ vm_disk }}"
  when: diskcopy.changed

- name: create cloud image user data
  template:
    src: kvm/user-data.yml.j2
    dest: "{{ tmpdir.path }}/user-data"
  vars:
    ssh_user: "{{ ansible_guest_username }}"
    ssh_key: "{{ ansible_guest_ssh_key }}"
    hostname: "{{ vm.name.split('.') | first }}"
    fqdn: "{{ vm.nic.host }}"
    iface: "{{ vm.nic }}"
    apt_mirror: "{{ mirror_url | urlsplit('hostname') }}"
  when: diskcopy.changed
  become: no

- name: create cloud image network config
  template:
    src: kvm/network-config.yml.j2
    dest: "{{ tmpdir.path }}/network-config"
  vars:
    iface: "{{ vm.nic }}"
  when: diskcopy.changed
  become: no

- name: create cloud image meta data
  template:
    src: kvm/meta-data.yml.j2
    dest: "{{ tmpdir.path }}/meta-data"
  vars:
    instance_id: "{{ vm.name.split('.') | first }}"
    hostname: "{{ vm.name.split('.') | first }}"
    fqdn: "{{ vm.nic.host }}"
  when: diskcopy.changed
  become: no

- name: create cloud image iso
  command: genisoimage -output {{ iso }} -volid cidata -joliet -r meta-data user-data network-config
  args:
    chdir: "{{ tmpdir.path }}"
  when: diskcopy.changed

- name: set vm definition path
  set_fact:
    domain_def: "{{ tmpdir.path }}/vm_{{ vm.name }}.xml"

- name: create vm template
  template:
    src: kvm/vm.xml.j2
    dest: "{{ domain_def }}"
  vars:
    disk: "{{ vm_disk }}"
  become: no

- name: get vm template contents
  slurp:
    src: "{{ domain_def }}"
  register: domain

- name: create vm
  virt:
    name: "{{ vm.name }}"
    command: define
    xml: "{{ domain['content'] | b64decode }}"
  when: diskcopy.changed

- name: manage vm
  virt:
    name: "{{ vm.name }}"
    state: "{{ vm.state | regex_replace('recreate', 'running') | regex_replace('present', 'running') }}"
    xml: "{{ domain['content'] | b64encode }}"
  when: vm.state in ['present', 'recreate', 'running']

- name: autostart vm
  command: "virsh -c qemu:///system autostart {{ vm.name }}"
  changed_when: false
  when: vm.state in ['present', 'recreate', 'running'] and vm.autostart

- name: remove temporary directory
  file:
    path: "{{ tmpdir.path }}"
    state: absent
  changed_when: false
  become: no
