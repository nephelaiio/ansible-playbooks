---
- name: bootstrap rke cluster

  hosts: rke_control

  vars:

    rke_ssh_key: ~/.ssh/id_rsa
    rke_bin: /usr/local/bin/rke
    kubectl_bin: /usr/local/bin/kubectl
    helm_bin: /usr/local/bin/helm
    rke_bin_url: "https://github.com/rancher/rke/releases/download/{{ rke_release }}/rke_linux-amd64"
    kubectl_bin_url: "https://storage.googleapis.com/kubernetes-release/release/{{ rke_kubectl_release }}/bin/linux/amd64/kubectl"
    helm_bin_url: "https://get.helm.sh/helm-{{ rke_helm_release }}-linux-amd64.tar.gz"
    docker_packages_helpers:
      - python3-docker

  roles:

    - nephelaiio.plugins

  pre_tasks:

    - name: gather package data
      package_facts:
        manager: auto

    - name: install package prerequisites
      package:
        name: open-iscsi
      become: yes
      tags:
        - always
    - name: get play username
      command: whoami
      register: rke_install_user_query
      changed_when: false
      tags:
        - always

    - name: set install username
      set_fact:
        rke_install_user: "{{ rke_install_user_query.stdout }}"
      tags:
        - always


  tasks:

    - block:

        - name: install docker
          include_role:
            name: nephelaiio.docker
            apply:
              become: yes
              tags:
                - docker
          when: "'docker-ce' not in ansible_facts.packages"

        - name: disable active swap volume
          shell: swapoff -a
          become: yes
          tags:
            - skip_ansible_lint

        - name: disable swap fstab entry
          lineinfile:
            state: absent
            path: /etc/fstab
            regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
          become: yes

        - name: configure docker access for rke install user
          user:
            append: yes
            name: "{{ rke_install_user }}"
            groups:
              - docker
          become: yes
          tags:
            - user

      tags:
        - docker

    - name: create cluster directory structure
      file:
        state: directory
        path: "{{ item }}"
        owner: "{{ rke_install_user }}"
        mode: 0750
      loop:
        - "{{ rke_cluster_dir }}"
        - "{{ rke_manifest_dir }}"
      become: yes
      tags:
        - always

    - name: install rke
      get_url:
        url: "{{ rke_bin_url }}"
        dest: "{{ rke_bin }}"
        mode: 0755
      become: yes

    - name: install kubectl
      get_url:
        url: "{{ kubectl_bin_url }}"
        dest: "{{ kubectl_bin }}"
        mode: 0755
      become: yes

    - name: create helm tempdir
      tempfile:
        state: directory
        prefix: helm
      register: helm_tmpdir
      changed_when: false

    - name: download helm bundle
      unarchive:
        src: "{{ helm_bin_url }}"
        dest: "{{ helm_tmpdir.path }}"
        remote_src: yes
      changed_when: false

    - name: install helm
      copy:
        src: "{{ helm_tmpdir.path }}/linux-amd64/helm"
        dest: "{{ helm_bin }}"
        mode: 0755
        remote_src: yes
      become: yes

    - name: destroy helm tempdir
      file:
        state: absent
        path: "{{ helm_tmpdir.path }}"
      changed_when: false

    - name: build rke cluster file
      template:
        src: rke/cluster.yml.j2
        dest: "{{ rke_cluster_dir }}/cluster.yml"
        owner: "{{ rke_install_user }}"
        mode: 0640
      tags:
        - rke

    - name: create ssh key dir
      file:
        path: ~/.ssh
        state: directory
        mode: 0700

    - name: create ssh keypair
      openssh_keypair:
        path: "{{ rke_ssh_key }}"
      register: rke_publickey

    - name: slurp ssh public key
      slurp:
        src: ~/.ssh/id_rsa.pub
      register: rke_pubkey

    - name: distribute ssh public keys
      authorized_key:
        comment: "{{ item }}"
        user: "{{ rke_install_user }}"
        key: "{{ rke_publickey.public_key }}"
      loop: "{{ groups['rke'] }}"
      loop_control:
        label: "{{ rke_install_user }}@{{ ansible_fqdn }} -> {{ item }}"
      delegate_to: "{{ item }}"

    - block:

        - name: deploy rke
          command: rke up
          args:
            chdir: "{{ rke_cluster_dir }}"
          retries: 2
          register: rke_deploy_result
          until: rke_deploy_result.rc == 0
          tags:
            - rke

        - name: slurp rkestate
          slurp:
            src: "{{ rke_cluster_dir }}/cluster.rkestate"
          register: rke_rkestate
          tags:
            - always

        - name: slurp kubectl config
          slurp:
            src: "{{ rke_cluster_dir }}/kube_config_cluster.yml"
          register: rke_kubectl_config

      run_once: yes

    - name: manage kubectl config directory
      file:
        path: ~/.kube
        state: directory

    - name: distribute rkestate
      copy:
        dest: "{{ rke_cluster_dir }}/cluster.rkestate"
        content: "{{ rke_rkestate['content'] | b64decode }}"
        owner: "{{ rke_install_user }}"
        mode: 0640
      tags:
        - configure

    - name: configure kubectl
      copy:
        dest: "~/.kube/config"
        content: "{{ rke_kubectl_config['content'] | b64decode }}"
        owner: "{{ rke_install_user }}"
        mode: 0600
      changed_when: false

    - name: install required pips
      pip:
        name: openshift

    - name: gather target manifest data
      set_fact:
        rke_target_templates: "{{ (rke_target_templates | default ([])) + [rke_target_template] }}"
      vars:
        rke_target_template:
          src: "{{ item }}"
          dest: "{{ rke_manifest_dir }}/{{ item | basename | regex_replace('\\.j2', '') }}"
      loop: "{{ lookup('fileglob', 'templates/manifests/*.j2.yml', wantlist=True) | sort }}"
      tags:
        - manifests

    - name: list previous templates
      find:
        paths: "{{ rke_manifest_dir }}"
        recurse: false
        file_type: file
      register: rke_manifest_query
      tags:
        - manifests

    - name: purge stale templates
      file:
        dest: "{{ item.path }}"
        state: absent
      when: item.path not in rke_target_templates | map(attribute='dest')
      loop_control:
        label: "{{ item.path }}"
      loop: "{{ rke_manifest_query.files }}"
      tags:
        - manifests

    - name: build rke manifest templates
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ rke_install_user }}"
        mode: 0640
      loop_control:
        label: "{{ item.dest }}"
      loop: "{{ rke_target_templates }}"
      tags:
        - manifests

    - block:

        - name: add helm repos
          community.kubernetes.helm_repository:
            name: "{{ item.name }}"
            repo_url: "{{ item.url }}"
          loop_control:
            label: "{{ item.name }}"
          loop:
            - name: jetstack
              url: https://charts.jetstack.io
            - name: longhorn
              url: https://charts.longhorn.io
            - name: bitnami
              url: https://charts.bitnami.com/bitnami
          tags:
            - helm

        - name: deploy cert-manager helm chart
          community.kubernetes.helm:
            name: cert-manager
            chart_ref: jetstack/cert-manager
            release_namespace: cert-manager
            create_namespace: yes
            release_values:
              installCRDs: true
              extraArgs:
                - "--dns01-recursive-nameservers=8.8.8.8:53,1.1.1.1:53"
          when: false
          tags:
            - certmanager

        - name: deploy longhorn helm chart
          community.kubernetes.helm:
            name: longhorn
            chart_ref: longhorn/longhorn
            release_namespace: longhorn-system
            create_namespace: yes
          tags:
            - longhorn

        - name: apply rke manifests
          k8s:
            state: present
            src: "{{ item.dest }}"
          loop_control:
            label: "{{ item.dest }}"
          loop: "{{ rke_target_templates }}"
          tags:
            - manifests

        - name: list storage classes
          k8s_info:
            kind: StorageClass
          register: storage_class_query
          tags:
            - longhorn

        - name: register storage classes
          set_fact:
            rke_storage_classes: "{{ storage_class_query.resources | map(attribute='metadata') | map(attribute='name') | list  }}"
          tags:
            - longhorn

        - name: set longhorn as default storage provider
          k8s:
            name: longhorn
            kind: StorageClass
            definition:
              metadata:
                annotations:
                  storageclass.kubernetes.io/is-default-class: "true"
          when: "'longhorn' in rke_storage_classes"
          tags:
            - longhorn

      run_once: yes
