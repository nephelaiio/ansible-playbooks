---
- name: bootstrap rke cluster

  hosts: rke_control

  vars:

    rke_ssh_key: ~/.ssh/id_rsa
    rke_bin: /usr/local/bin/rke
    kubectl_bin: /usr/local/bin/kubectl
    helm_bin: /usr/local/bin/helm
    rke_bin_url: "https://github.com/rancher/rke/releases/download/{{ rke_release }}/rke_linux-amd64"
    kubectl_bin_url: "https://storage.googleapis.com/kubernetes-release/release/{{ rke_kubectl_release }}/bin/linux/amd64/kubectl"
    helm_bin_url: "https://get.helm.sh/helm-{{ rke_helm_release }}-linux-amd64.tar.gz"
    docker_packages_helpers:
      - python3-docker

  roles:

    - nephelaiio.plugins

  pre_tasks:

    - name: gather package data
      package_facts:
        manager: auto

    - name: install package prerequisites
      package:
        name: open-iscsi
      become: yes
      tags:
        - always
    - name: get play username
      command: whoami
      register: rke_install_user_query
      changed_when: false
      tags:
        - always

    - name: set install username
      set_fact:
        rke_install_user: "{{ rke_install_user_query.stdout }}"
      tags:
        - always


  tasks:

    - block:

        - name: install docker
          include_role:
            name: nephelaiio.docker
            apply:
              become: yes
              tags:
                - docker
          when: "'docker-ce' not in ansible_facts.packages"

        - name: disable active swap volume
          shell: swapoff -a
          become: yes
          changed_when: false
          tags:
            - skip_ansible_lint

        - name: disable swap fstab entry
          lineinfile:
            state: absent
            path: /etc/fstab
            regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
          become: yes

        - name: configure docker access for rke install user
          user:
            append: yes
            name: "{{ rke_install_user }}"
            groups:
              - docker
          become: yes
          tags:
            - user

      tags:
        - docker

    - name: create cluster directory structure
      file:
        state: directory
        path: "{{ item }}"
        owner: "{{ rke_install_user }}"
        mode: 0750
      loop:
        - "{{ rke_cluster_dir }}"
        - "{{ rke_manifest_dir }}"
      become: yes
      tags:
        - always

    - name: install rke
      get_url:
        url: "{{ rke_bin_url }}"
        dest: "{{ rke_bin }}"
        mode: 0755
      become: yes

    - name: install kubectl
      get_url:
        url: "{{ kubectl_bin_url }}"
        dest: "{{ kubectl_bin }}"
        mode: 0755
      become: yes

    - name: create helm tempdir
      tempfile:
        state: directory
        prefix: helm
      register: helm_tmpdir
      changed_when: false

    - name: download helm bundle
      unarchive:
        src: "{{ helm_bin_url }}"
        dest: "{{ helm_tmpdir.path }}"
        remote_src: yes
      changed_when: false

    - name: install helm
      copy:
        src: "{{ helm_tmpdir.path }}/linux-amd64/helm"
        dest: "{{ helm_bin }}"
        mode: 0755
        remote_src: yes
      become: yes

    - name: destroy helm tempdir
      file:
        state: absent
        path: "{{ helm_tmpdir.path }}"
      changed_when: false

    - name: build rke cluster file
      template:
        src: templates/rke/cluster.yml.j2
        dest: "{{ rke_cluster_dir }}/cluster.yml"
        owner: "{{ rke_install_user }}"
        mode: 0640
      tags:
        - rke

    - name: create ssh key dir
      file:
        path: ~/.ssh
        state: directory
        mode: 0700

    - name: create ssh keypair
      openssh_keypair:
        path: "{{ rke_ssh_key }}"
      register: rke_publickey

    - name: slurp ssh public key
      slurp:
        src: ~/.ssh/id_rsa.pub
      register: rke_pubkey

    - name: distribute ssh public keys
      authorized_key:
        comment: "{{ item }}"
        user: "{{ rke_install_user }}"
        key: "{{ rke_publickey.public_key }}"
      loop: "{{ groups['rke'] }}"
      loop_control:
        label: "{{ rke_install_user }}@{{ ansible_fqdn }} -> {{ item }}"
      delegate_to: "{{ item }}"

    - block:

        - name: deploy rke
          command: rke up
          args:
            chdir: "{{ rke_cluster_dir }}"
          retries: 2
          register: rke_deploy_result
          until: rke_deploy_result.rc == 0
          tags:
            - rke

        - name: slurp rkestate
          slurp:
            src: "{{ rke_cluster_dir }}/cluster.rkestate"
          register: rke_rkestate
          tags:
            - always

        - name: slurp kubectl config
          slurp:
            src: "{{ rke_cluster_dir }}/kube_config_cluster.yml"
          register: rke_kubectl_config

      run_once: yes

    - name: manage kubectl config directory
      file:
        path: ~/.kube
        state: directory

    - name: distribute rkestate
      copy:
        dest: "{{ rke_cluster_dir }}/cluster.rkestate"
        content: "{{ rke_rkestate['content'] | b64decode }}"
        owner: "{{ rke_install_user }}"
        mode: 0640
      tags:
        - configure

    - name: configure kubectl
      copy:
        dest: "~/.kube/config"
        content: "{{ rke_kubectl_config['content'] | b64decode }}"
        owner: "{{ rke_install_user }}"
        mode: 0600
      changed_when: false

    - name: install required pips
      pip:
        name: openshift

    - block:

        - name: add helm repos
          community.kubernetes.helm_repository:
            name: "{{ item.name }}"
            repo_url: "{{ item.url }}"
          loop_control:
            label: "{{ item.name }}"
          loop:
            - name: sealed-secrets
              url: https://bitnami-labs.github.io/sealed-secrets
          tags:
            - helm

        - name: deploy sealed secrets helm chart
          community.kubernetes.helm:
            name: sealed-secrets-controller
            chart_ref: sealed-secrets/sealed-secrets
            release_namespace: kube-system
          tags:
            - longhorn

      run_once: yes

    - name: set argocd metadata
      set_fact:
        rke_argocd_dir: "{{ rke_manifest_dir }}/argocd"

    - block:

        - name: create argocd manifest directory
          file:
            state: directory
            path: "{{ rke_argocd_dir }}"
            owner: "{{ rke_install_user }}"
            mode: 0750

        - name: create argocd namespace manifest
          template:
            src: argocd/namespace.j2.yml
            dest: "{{ rke_argocd_dir }}/namespace.yml"

        - name: retrieve argocd manifest
          get_url:
            url: "{{ rke_argocd_manifest }}"
            dest: "{{ rke_argocd_dir }}/argocd.yml"
            force: yes

        - name: create argocd argo tunnel template
          template:
            src: argocd/argo.j2.yml
            dest: "{{ rke_argocd_dir }}/cloudflare.yml"
          vars:
            target_deployment: argocd
            target_namespace: "{{ rke_argocd_namespace }}"
            target_hostname: "{{ rke_argocd_hostname }}"
            target_url: https://argocd-server.default.svc.cluster.local:443

        - name: deploy argocd tunnel
          command: "kubectl {{ kubectl_cmd }} -f {{ item }}"
          vars:
            kubectl_cmd: "{{ (rke_argocd_state != 'absent') | ternary('apply', 'delete')  }}"
          loop:
            - "{{ rke_argocd_dir }}/namespace.yml"
            - "{{ rke_argocd_dir }}/argocd.yml"
            - "{{ rke_argocd_dir }}/cloudflare.yml"

      when: rke_argocd_state != 'absent'

    - name: remove argocd manifests
      file:
        path: "{{ item }}"
        state: "{{ rke_argocd_state }}"
      loop:
        - "{{ rke_argocd_dir }}/namespace.yml"
        - "{{ rke_argocd_dir }}/argocd.yml"
        - "{{ rke_argocd_dir }}/cloudflare.yml"
      when: rke_argocd_state == 'absent'

    - name: remove stale manifests
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ rke_manifest_dir }}/argocd.yml"
        - "{{ rke_manifest_dir }}/cloudflare.yml"

    - name: manage argocd deployment
      command: "kubectl {{ kubectl_cmd }} -f {{ item }}"
      vars:
        kubectl_cmd: "{{ (rke_argocd_state != 'absent') | ternary('apply', 'delete')  }}"
      loop:
        - "{{ rke_argocd_dir }}/namespace.yml"
        - "{{ rke_argocd_dir }}/argocd.yml"
        - "{{ rke_argocd_dir }}/cloudflare.yml"
      run_once: yes
