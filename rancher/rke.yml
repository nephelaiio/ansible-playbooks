---
- name: bootstrap rke cluster

  hosts: rke_control

  vars:

    rke_manifest_dir: "{{ rke_cluster_dir }}/manifests"
    rke_cluster_dir: /opt/rke
    rke_ssh_key: ~/.ssh/id_rsa
    rke_bin: /usr/local/bin/rke
    kubectl_bin: /usr/local/bin/kubectl
    helm_bin: /usr/local/bin/helm
    rke_bin_url: "https://github.com/rancher/rke/releases/download/{{ rke_release }}/rke_linux-amd64"
    kubectl_bin_url: "https://storage.googleapis.com/kubernetes-release/release/{{ rke_kubectl_release }}/bin/linux/amd64/kubectl"
    helm_bin_url: "https://get.helm.sh/helm-{{ rke_helm_release }}-linux-amd64.tar.gz"
    docker_packages_helpers:
      - python3-docker

  roles:

    - nephelaiio.plugins

  pre_tasks:

    - name: gather package data
      package_facts:
        manager: auto

    - name: install package prerequisites
      package:
        name: open-iscsi
      become: yes
      tags:
        - always

  tasks:

    - name: get play username
      command: whoami
      register: rke_install_user_query
      changed_when: false
      tags:
        - always

    - name: set install username
      set_fact:
        rke_install_user: "{{ rke_install_user_query.stdout }}"
      tags:
        - always

    - block:

        - name: install docker
          include_role:
            name: nephelaiio.docker
            apply:
              become: yes
              tags:
                - docker
          when: "'docker-ce' not in ansible_facts.packages"

        - name: disable active swap volume
          shell: swapoff -a
          become: yes
          tags:
            - skip_ansible_lint

        - name: disable swap fstab entry
          lineinfile:
            state: absent
            path: /etc/fstab
            regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
          become: yes

        - name: configure docker access for rke install user
          user:
            append: yes
            name: "{{ rke_install_user }}"
            group: docker
          become: yes
          tags:
            - user

      tags:
        - docker

    - name: create cluster directory structure
      file:
        state: directory
        path: "{{ item }}"
        owner: "{{ rke_install_user }}"
        mode: 0750
      loop:
        - "{{ rke_cluster_dir }}"
        - "{{ rke_manifest_dir }}"
      become: yes
      tags:
        - always

    - name: install rke
      get_url:
        url: "{{ rke_bin_url }}"
        dest: "{{ rke_bin }}"
        mode: 0755
      become: yes

    - name: install kubectl
      get_url:
        url: "{{ kubectl_bin_url }}"
        dest: "{{ kubectl_bin }}"
        mode: 0755
      become: yes

    - name: create helm tempdir
      tempfile:
        state: directory
        prefix: helm
      register: helm_tmpdir
      changed_when: false

    - name: download helm bundle
      unarchive:
        src: "{{ helm_bin_url }}"
        dest: "{{ helm_tmpdir.path }}"
        remote_src: yes
      changed_when: false

    - name: install helm
      copy:
        src: "{{ helm_tmpdir.path }}/linux-amd64/helm"
        dest: "{{ helm_bin }}"
        mode: 0755
        remote_src: yes
      become: yes

    - name: destroy helm tempdir
      file:
        state: absent
        path: "{{ helm_tmpdir.path }}"
      changed_when: false

    - name: build rke cluster file
      template:
        src: rke/cluster.yml.j2
        dest: "{{ rke_cluster_dir }}/cluster.yml"
        owner: "{{ rke_install_user }}"
        mode: 0640
      tags:
        - rke

    - name: create ssh key dir
      file:
        path: ~/.ssh
        state: directory
        mode: 0700

    - name: create ssh keypair
      openssh_keypair:
        path: "{{ rke_ssh_key }}"
      register: rke_publickey

    - name: slurp ssh public key
      slurp:
        src: ~/.ssh/id_rsa.pub
      register: rke_pubkey

    - name: distribute ssh public keys
      authorized_key:
        comment: "{{ item }}"
        user: "{{ rke_install_user }}"
        key: "{{ rke_publickey.public_key }}"
      loop: "{{ groups['rke'] }}"
      loop_control:
        label: "{{ rke_install_user }}@{{ ansible_fqdn }} -> {{ item }}"
      delegate_to: "{{ item }}"

    - block:

        - name: deploy rke
          command: rke up
          args:
            chdir: "{{ rke_cluster_dir }}"
          retries: 2
          register: rke_deploy_result
          until: rke_deploy_result.rc == 0
          tags:
            - rke

        - name: slurp rkestate
          slurp:
            src: "{{ rke_cluster_dir }}/cluster.rkestate"
          register: rke_rkestate
          tags:
            - always

        - name: slurp kubectl config
          slurp:
            src: "{{ rke_cluster_dir }}/kube_config_cluster.yml"
          register: rke_kubectl_config

      run_once: yes

    - name: manage kubectl config directory
      file:
        path: ~/.kube
        state: directory

    - name: distribute rkestate
      copy:
        dest: "{{ rke_cluster_dir }}/cluster.rkestate"
        content: "{{ rke_rkestate['content'] | b64decode }}"
        owner: "{{ rke_install_user }}"
        mode: 0640
      tags:
        - configure

    - name: configure kubectl
      copy:
        dest: "~/.kube/config"
        content: "{{ rke_kubectl_config['content'] | b64decode }}"
        owner: "{{ rke_install_user }}"
        mode: 0600
      changed_when: false

    - name: install required pips
      pip:
        name: openshift

    - name: build rke templates
      template:
        src: "{{ item }}"
        dest: "{{ rke_manifest_dir }}/{{ item | basename | regex_replace('\\.j2', '') }}"
        owner: "{{ rke_install_user }}"
        mode: 0640
      loop: "{{ lookup('fileglob', 'templates/manifests/*.j2.yml', wantlist=True) | sort }}"
      tags:
        - manifests

    - block:

        - name: query helm releases
          command: helm list --all-namespaces -o json
          register: helm_release_query
          changed_when: false
          tags:
            - manifests

        - name: register helm releases
          set_fact:
            rke_helm_releases: "{{ helm_release_query.stdout | from_json | map(attribute='name') | list }}"
          tags:
            - manifests

        - name: create cert-manager namespace
          k8s:
            state: present
            definition: |
              ---
              apiVersion: v1
              kind: Namespace
              metadata:
                name: cert-manager
          tags:
            - manifests

        - name: add cert-manager helm repo
          command: helm repo add jetstack https://charts.jetstack.io
          changed_when: false
          tags:
            - manifests

        - name: update helm repos
          command: helm repo update
          changed_when: false
          tags:
            - manifests

        - name: deploy cert-manager helm chart
          command: "helm {{ helm_action }} cert-manager --namespace cert-manager --version {{ rke_cert_manager_release }} jetstack/cert-manager --set 'extraArgs={--dns01-recursive-nameservers=8.8.8.8:53,1.1.1.1:53}' --set installCRDs=true"
          vars:
            helm_action: "{{ 'upgrade' if 'cert-manager' in rke_helm_releases else 'install' }}"
          tags:
            - manifests

        - name: apply external manifests
          k8s:
            state: present
            definition: "{{ lookup('url', item, split_lines=False) }}"
          loop: "{{ rke_external_manifests }}"
          run_once: yes
          tags:
            - manifests

        - name: verify metallb secret
          command: "kubectl get secret memberlist -n {{ rke_metallb_namespace }}"
          changed_when: false
          ignore_errors: true
          register: rke_metallb_secret_query
          tags:
            - always
            - metallb

        - block:

            - name: generate metallb secret string
              command: openssl rand -base64 128
              changed_when: false
              register: rke_metallb_secret
              tags:
                - manifests
                - metallb

            - name: create metallb secret
              command: "kubectl create secret generic -n {{ rke_metallb_namespace }} memberlist --from-literal=secretkey=\"{{ rke_metallb_secret.stdout }}\""
              tags:
                - manifests
                - metallb

          when: rke_metallb_secret_query is failed

        - name: apply rke manifests
          command: "kubectl apply -f {{ manifest }}"
          vars:
            manifest: "{{ rke_manifest_dir }}/{{ item | basename | regex_replace('\\.j2', '') }}"
          register: kubectl_apply
          loop: "{{ lookup('fileglob', 'templates/manifests/*.j2.yml', wantlist=True) | sort }}"
          retries: 3
          delay: 15
          until: kubectl_apply.rc == 0
          tags:
            - manifests

      run_once: yes
