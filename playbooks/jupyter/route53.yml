# vim: ts=2 sw=2 et :
---
- name: manage jupyter.nephelai.io route53 artifacts

  hosts: local

  vars_files:
    - vars.yml

  tasks:

    - name: query route53 zone
      changed_when: false
      local_action: command aws route53 list-hosted-zones --query 'HostedZones[?Name==`{{ route53_zone }}`].Id' --output text
      register: route53_zone_query

    - name: query route53 record
      changed_when: false
      local_action: command aws route53 list-resource-record-sets --hosted-zone-id={{ route53_zone_query.stdout }} --query "ResourceRecordSets[?Name==`jupyter.{{ route53_zone }}`]"
      register: route53_rrs_query

    - name: register recordset
      set_fact:
        route53_rrs: "{{ route53_rrs_query.stdout | from_json }}"

    - name: delete route53 record
      local_action:
        module: route53
        command: delete
        zone: "{{ jupyter.route53_zone }}"
        record: "{{ item.0.Name }}"
        value: "{{ item.1.Value }}"
        type: "{{ item.0.Type }}"
      with_subelements:
        - "{{ route53_rrs }}"
        - ResourceRecords
      when:
        - route53_rrs | list | length > 0

    - name: query instances
      changed_when: false
      local_action: command aws ec2 describe-instances --region {{ region }} --filter "Name=client-token,Values={{ client_token }}" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[]"
      register: instance_query

    - name: register query
      set_fact:
        instances: "{{ instance_query.stdout | from_json }}"

    - name: create route53 record
      local_action:
        module: route53
        command: create
        zone: "{{ route53_zone }}"
        record: "jupyter.{{ route53_zone }}"
        value: "{{ instances | map(attribute='PublicIpAddress') | join(' ') }}"
        type: A
