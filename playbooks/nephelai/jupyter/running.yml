# vim: ts=2 sw=2 et :
---
- include: provision.yml

- name: start jupyter.nephelai.io

  hosts: local

  vars_files: 
    - vars.yml

  tasks:

    - name: query instances
      changed_when: false
      local_action: command aws ec2 describe-instances --region {{ region }} --filter "Name=client-token,Values={{ client_token }}" "Name=instance-state-name,Values=running,stopped" --query "Reservations[].Instances[]"
      register: instance_query

    - name: register instances
      set_fact:
        instances: "{{ instance_query.stdout | from_json }}"

    - name: manage jupyter instances
      local_action:
        module: ec2
        region: "{{ region }}"
        id: "{{ client_token }}"
        instance_ids: "{{ instances | map(attribute='InstanceId') | list }}"
        state: "{{ state }}"
      register: ec2

    - name: pause until instance values are updated
      pause:
          seconds: "{{ pause_seconds }}"

    - name: query instances
      changed_when: false
      local_action: command aws ec2 describe-instances --region {{ region }} --filter "Name=client-token,Values={{ client_token }}" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[]"
      register: instance_query

    - name: register instances
      set_fact:
        instances: "{{ instance_query.stdout | from_json }}"

    - debug:
        var: instances

    - name: destroy persistent inventory
      local_action:
        module: file
        path: '../../../inventory/aws'
        state: absent

    - name: create persistent inventory
      local_action:
        module: lineinfile
        dest: '../../../inventory/aws'
        line: '[jupyter]'
        insertbefore: BOF
        create: true
        state: present

    - name: configure persistent inventory
      local_action:
        module: lineinfile
        dest: '../../../inventory/aws'
        insertafter: '[jupyter]'
        regexp: ".*client_token={{ client_token }}"
        line: "{{ item.PublicDnsName }} ansible_user={{ ami_user }} client_token={{ client_token }}"
        state: present
      with_items: "{{ instances }}"

    - name: provision in-memory inventory
      local_action:
        module: add_host
        groups: jupyter
        name: "{{ item.PublicDnsName }}"
      with_items: "{{ instances }}"

    - name: wait for ssh
      changed_when: false
      local_action:
        module: wait_for
        host: "{{ item.PublicDnsName }}"
        port: 22
        state: started
      with_items: "{{ instances }}"


- include: route53.yml


- name: manage services

  hosts: jupyter

  become: yes

  tasks:

    - name: configure jupyter service
      include_role: 
        name: nephelaiio.jupyter
      vars:
        jupyter_user: ubuntu
        jupyter_group: ubuntu
        jupyter_password: 'sha1:40fc69fc333e:2d76af7b1ce1fd4b889bbebddd0d5b0be1aba9e4'

    - name: start jupyter
      service:
        name: jupyter
        state:
          - running
          - enabled
