# vim: ts=2 sw=2 et :
---
- name: provision jupyter.nephelai.io artifacts

  hosts: local

  vars_files: 
    - vars.yml

  tasks:

    - name: query instances
      changed_when: false
      local_action: command aws ec2 describe-instances --region {{ region }} --filter Name=client-token,Values={{ client_token }} --query "Reservations[].Instances[?State.Name!=`terminated`].InstanceId" --output text
      register: instance_query

    - name: register instance ids
      set_fact:
        instances: "{{ instance_query.stdout }}"

    - debug:
        var: instances

    - block:

      - name: provision jupyter instances
        local_action:
          module: ec2
          region: "{{ region }}"
          instance_ids: "instances"
          state: "{{ state }}"
          groups:
            - httpd
        register: ec2

      when: instances | length > 0

    - name: retrieve route53 zone
      changed_when: false
      local_action: command aws route53 list-hosted-zones --query 'HostedZones[?Name==`{{ route53_zone }}`].Id' --output text
      register: route53_zone_query

    - name: query route53 record
      changed_when: false
      local_action: command aws route53 list-resource-record-sets --hosted-zone-id={{ route53_zone_query.stdout }} --query "ResourceRecordSets[?Name==`jupyter.{{ route53_zone }}`]"
      register: route53_rrs_query

    - set_fact:
        route53_rrs: route53_rrs_query.stdout | from_json | d([])

    - name: delete route53 record
      local_action:
        module: route53
        command: delete
        zone: "{{ route53_zone }}"
        record: "{{ route53_rrs_query | map(attribute='Name') | first }}"
        value: "{{ item | string }}"
        type: "{{ route53_rrs | map(attribute='Type') | first }}"
      with_items: "{{ route53_rrs | map(attribute='ResourceRecords') | first | d([]) |  map(attribute='Value') | list }}"
