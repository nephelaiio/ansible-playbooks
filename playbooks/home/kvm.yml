- hosts: kvm

  vars_files:

    - vars.yml

  vars:

    cleanup: False
    
  tasks:
    
    - name: install requirements
      package:
        name:
          - qemu
          - libvirt
          - libvirt-python
          - bridge-utils
          - dnsmasq
          - ebtables
          - dmidecode
          - cloud-init
          - cdrtools
          - python-lxml
      when: ansible_os_family == "Archlinux"
      become: yes

    - name: configure bridging
      copy:
        src: "../../files/kvm/bridge.conf"
        dest: "{{ kvm.bridge_config }}"
        force: no
        mode: 0644
      become: yes
      notify: configure bridge

    - name: fetch images
      local_action: >-
        get_url
        url="{{ item.value.src }}"
        dest="../../files/{{ item.value.img }}"
        mode=0644
      with_dict: "{{ kvm.images }}"
      notify: uncompress images

    - meta: flush_handlers

    - include: kvm/tasks/pool_create.yml
      vars:
        pool: "{{ kvm.defaults.pool | combine({'name': item.key},  item.value) }}"
      with_dict: "{{ kvm.pools }}"
      static: no

    - include: kvm/tasks/vm_destroy.yml
      vars:
        vm: "{{ kvm.defaults.vm | combine(item) }}"
        pool: "{{ kvm.pools[vm.pool].path }}"
        iso: "{{ pool }}/cloud_init_{{ vm.name }}.iso"
      with_items: "{{ kvm.vms }}"
      static: no

    - include: kvm/tasks/vm_create.yml
      vars:
        vm: "{{ kvm.defaults.vm | combine(item) }}"
        img: "{{ kvm.images[vm.image].img }}"
        pool: "{{ kvm.pools[vm.pool].path }}"
        iso: "{{ pool }}/cloud_init_{{ vm.name }}.iso"
      with_items: "{{ kvm.vms }}"
      static: no

  handlers:

    - name: uncompress images
      local_action: >-
        command qemu-img convert -O qcow2 {{ img }} {{ img }}
        chdir="../../files"
      vars:
        img: "{{ item.value.img }}" 
      with_dict: "{{ kvm.images }}"

    - name: configure bridge
      command: "sysctl -p {{ kvm.bridge_config }}"
      become: yes
