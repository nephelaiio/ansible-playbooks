---
- name: create temporary target directory
  tempfile:
    state: directory
    prefix: img
  register: tmpdir_dest

- name: register target root directory
  set_fact:
    root_dir: "{{ tmpdir_dest.path }}/root"

- name: register target boot directory
  set_fact:
    boot_dir: "{{ tmpdir_dest.path }}/boot"

- name: create target directories
  file:
    path: "{{ dir }}"
    state: directory
  loop_control:
    loop_var: dir
  with_items:
    - "{{ root_dir }}"
    - "{{ boot_dir }}"

- name: create image target directory
  file:
    state: directory
    path: files/images

- name: register target raspbian iso file
  set_fact:
    dest_img: "{{ raspbian_mirror_path }}/{{ raspbian_host.hostname }}.img"

- name: unarchive raspbian image
  unarchive:
    src: "{{ raspbian_source_image }}"
    dest: "{{ dest_img | dirname }}"
    remote_src: yes
    list_files: yes
  register: raspbian_img

- name: copy raspbian source image
  copy:
    src: "{{ dest_img | dirname }}/{{ raspbian_img.files[0] }}"
    dest: "{{ dest_img }}"
    remote_src: yes

- name: inspect raspbian root partition offset
  shell: "parted {{ dest_img }} -m unit B print | awk -F':' '/ext4/ { print $2 }' | awk -F'B' '{ print $1 }'"
  register: root_offset

- name: calculate raspbian partition offset
  set_fact:
    raspbian_root_offset: "{{ root_offset.stdout | int }}"

- name: inspect raspbian root partition size
  shell: "parted {{ dest_img }} -m unit B print | awk -F':' '/ext4/ { print $4 }' | awk -F'B' '{ print $1 }'"
  register: root_size

- name: calculate raspbian root partition size
  set_fact:
    raspbian_root_size: "{{ root_size.stdout | int }}"

- name: mount raspbian root partition
  command: "mount -o offset={{ raspbian_root_offset }},sizelimit={{ raspbian_root_size }} {{ dest_img }} {{ tmpdir_dest.path }}"
  args:
    warn: no

- name: inspect raspbian boot partition offset
  shell: "parted {{ dest_img }} -m unit B print | awk -F':' '/fat32/ { print $2 }' | awk -F'B' '{ print $1 }'"
  register: boot_offset

- name: calculate raspbian boot partition offset
  set_fact:
    raspbian_boot_offset: "{{ boot_offset.stdout | int }}"

- name: inspect raspbian boot partition size
  shell: "parted {{ dest_img }} -m unit B print | awk -F':' '/fat32/ { print $4 }' | awk -F'B' '{ print $1 }'"
  register: boot_size

- name: calculate raspbian boot partition size
  set_fact:
    raspbian_boot_size: "{{ boot_size.stdout | int }}"

- name: mount raspbian boot partition
  command: "mount -o offset={{ raspbian_boot_offset }},sizelimit={{ raspbian_boot_size }} {{ dest_img }} {{ tmpdir_dest.path }}/boot"
  args:
    warn: no

- name: set hostname
  copy:
    dest: "{{ tmpdir_dest.path }}/etc/hostname"
    content: "{{ raspbian_host.hostname | split_with('.') | head }}"
    force: yes
    mode: 0644

- name: update hosts file
  lineinfile:
    path: "{{ tmpdir_dest.path }}/etc/hosts"
    regexp: "^127.0.1.1"
    line: "127.0.1.1       {{ raspbian_host.hostname }} {{ raspbian_host.hostname | split_with('.') | first }}"
    insertafter: EOF

- name: disable mac based interface naming
  lineinfile:
    path: "{{ tmpdir_dest.path }}/boot/cmdline.txt"
    line: "net.ifnames=0"
    insertafter: EOF

- name: configure interfaces
  template:
    src: templates/images/interface.debian.j2
    dest: "{{ tmpdir_dest.path }}/etc/network/interfaces.d/{{ iface.name }}"
  loop_control:
    loop_var: iface
  with_items: "{{ raspbian_host.ifaces }}"

- name: configure ssh autostart
  file:
    path: "{{ tmpdir_dest.path }}/boot/ssh"
    state: touch

- name: create ssh user directory
  file:
    state: directory
    path: "{{ tmpdir_dest.path }}/home/pi/.ssh"
    owner: "{{ raspbian_user_id | default(1000) }}"
    group: "{{ raspbian_group_id | default(1000) }}"
    mode: 0700

- name: copy ssh user key
  copy:
    content: "{{ raspbian_user_pubkey }}"
    dest: "{{ tmpdir_dest.path }}/home/pi/.ssh/authorized_keys"
    owner: "{{ raspbian_user_id | default(1000) }}"
    group: "{{ raspbian_group_id | default(1000) }}"
    mode: 0600

- name: disable ssh password logins
  lineinfile:
    regexp: '^#?PasswordAuthentication'
    line: "PasswordAuthentication no"
    dest: "{{ tmpdir_dest.path }}/etc/ssh/sshd_config"

- name: unmount raspbian target image
  command: "umount {{ mntitem }}"
  args:
    warn: no
  loop_control:
    loop_var: mntitem
  with_items:
    - "{{ tmpdir_dest.path }}/boot"
    - "{{ tmpdir_dest.path }}"

- name: remove temporary directories
  file:
    path: "{{ tmpitem }}"
    state: absent
  with_items:
    - "{{ tmpdir_dest.path }}"
  loop_control:
    loop_var: tmpitem
