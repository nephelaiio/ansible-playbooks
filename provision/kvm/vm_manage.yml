---
- name: register image temp directory
  tempfile:
    state: directory
    suffix: images
  register: img_dir
  delegate_to: localhost

- block:

    - name: build vm profile definitions
      set_fact:
        kvm_profile: "{{ kvm_profiles[hostvars[name].kvm_profile | default(kvm_default_profile)] }}"
        custom_profile:
          name: "{{ name }}"
          nic:
            method: dhcp4
            host: "{{ hostvars[name]['inventory_hostname'] }}"
            hw-address: "{{ hostvars[name]['hw_address'] }}"
        inventory_profile: "{{ hostvars[name] }}"

    - name: build vm definition
      set_fact:
        vm: "{{ kvm_profile | combine(custom_profile, inventory_profile, recursive=true) }}"

    - name: build vm pool definition
      set_fact:
        pool: "{{ kvm_pools[vm.pool].path }}"

    - name: build vm img and iso definitions
      set_fact:
        iso: "{{ pool }}/cloud_init_{{ name }}.iso"
        img: "{{ kvm_images[vm.image] }}"

    - block:

        - name: destroy vm
          virt:
            name: "{{ vm.name }}"
            command: destroy
          failed_when: false

        - name: undefine vm
          virt:
            name: "{{ vm.name }}"
            command: undefine
          failed_when: false

        - name: delete vm disk
          file:
            path: "{{ pool }}/{{ vm.name }}.img"
            state: absent
          become: yes
          when: pool is defined

        - name: delete vm cloud image disk
          file:
            path: "{{ iso }}"
            state: absent
          become: yes
          when: iso is defined

        - name: delete vm qemu definitions
          file:
            path: "{{ qemudefitem }}"
            state: absent
          loop_control:
            loop_var: qemudefitem
          with_items:
            - "/etc/libvirt/qemu/{{ vm.name }}.xml"
            - "/etc/libvirt/qemu/autostart/{{ vm.name }}.xml"
            - "/var/lib/libvirt/images/cloud_init_{{ vm.name }}.xml"
            - "/var/lib/libvirt/images/cloud_init_{{ vm.name }}.iso"
            - "/var/lib/libvirt/images/{{ vm.name }}.img"
          become: yes

      when:
        - vm.state in ['absent', 'recreate']

    - block:

        - name: create temporary directory
          tempfile:
            state: directory
            prefix: kvm_{{ vm.name }}_
          register: tmpdir
          changed_when: False
          become: no

        - name: set vm target disk path var
          set_fact:
            vm_img: "{{ tmpdir.path }}/{{ img.url | basename }}"
            vm_disk: "{{ pool }}/{{ vm.name }}.img"

        - name: fetch vm image
          get_url:
            url: "{{ img.url }}"
            dest: "{{ vm_img }}"
            mode: 0666
          register: fetch_image
          retries: 5

        - name: extract vm image
          command: "xz -k -d {{ vm_img }}"
          changed_when: false
          when: vm_img is match(".*\.xz")

        - name: register vm image path
          command: basename {{ vm_img }} .xz
          register: img_filename
          changed_when: false

        - name: uncompress vm image
          command: "qemu-img convert -O {{ format }} {{ source }} {{ target }}"
          args:
            chdir: "{{ img_dir.path }}"
            creates: "{{ target }}"
          vars:
            format: "{{ img.format }}"
            source: "{{ vm_img | dirname }}/{{ img_filename.stdout }}"
            target: "{{ vm_disk }}"
          register: diskcopy

        - name: resize vm disk
          command: "qemu-img resize {{ disk }} {{ vm.size }}"
          vars:
            disk: "{{ vm_disk }}"
          when: diskcopy.changed

        - name: regsiter password salt
          set_fact:
            pass_salt: salt

        - name: create vm cloud image user data
          template:
            src: "user-data-{{ vm.image }}.yml.j2"
            dest: "{{ tmpdir.path }}/user-data"
          vars:
            ssh_user: "{{ ansible_guest_username }}"
            ssh_pass: "{{ ansible_guest_password | password_hash('sha512') }}"
            ssh_key: "{{ ansible_guest_ssh_key }}"
            hostname: "{{ vm.name }}"
            fqdn: "{{ vm.nic.host }}"
            iface: "{{ vm.nic }}"
            apt_mirror: "{{ ubuntu_url | urlsplit('hostname') }}"
            yum_mirror: "{{ centos_url | urlsplit('hostname') }}"
            epel_mirror: "{{ epel_url | urlsplit('hostname') }}"
            image: "{{ vm.image }}"
          when: diskcopy.changed
          become: no

        - name: create vm cloud image network config
          template:
            src: "network-config-{{ vm.image }}.yml.j2"
            dest: "{{ tmpdir.path }}/network-config"
          vars:
            iface: "{{ vm.nic }}"
          when: diskcopy.changed
          become: no

        - debug:
            msg: "{{ lookup('file', tmpdir.path + '/network-config') }}"
          when: diskcopy.changed

        - name: create vm cloud image meta data
          template:
            src: meta-data.yml.j2
            dest: "{{ tmpdir.path }}/meta-data"
          vars:
            instance_id: "{{ vm.name }}"
            hostname: "{{ vm.name }}"
            fqdn: "{{ vm.nic.host }}"
          when: diskcopy.changed
          become: no

        - name: create vm cloud image iso
          command: genisoimage -output {{ iso }} -volid cidata -joliet -r meta-data user-data network-config
          args:
            chdir: "{{ tmpdir.path }}"
          when: diskcopy.changed

        - name: set vm definition path
          set_fact:
            domain_def: "{{ tmpdir.path }}/vm_{{ vm.name }}.xml"

        - name: create vm template
          template:
            src: vm.xml.j2
            dest: "{{ domain_def }}"
          vars:
            disk: "{{ vm_disk }}"
          become: no

        - name: get vm template contents
          slurp:
            src: "{{ domain_def }}"
          register: domain

        - name: create vm
          virt:
            name: "{{ vm.name }}"
            command: define
            xml: "{{ domain['content'] | b64decode }}"
          when: diskcopy.changed

        - name: manage vm
          virt:
            name: "{{ vm.name }}"
            state: "{{ vm.state | regex_replace('recreate', 'running') | regex_replace('present', 'running') }}"
            xml: "{{ domain['content'] | b64encode }}"

        - name: autostart vm
          command: "virsh -c qemu:///system autostart {{ vm.name }}"
          changed_when: false
          when: vm.autostart

        - name: remove temporary directory
          file:
            path: "{{ tmpdir.path }}"
            state: absent
          changed_when: false
          become: no

      when:
        - vm.state in ['present', 'recreate', 'running']

  when:
    - "'inventory_hostname' in hostvars[name]"
    - "'ansible_host' in hostvars[name]"
  delegate_to: localhost

- name: delete image temp directory
  file:
    path: "{{ img_dir.path }}"
    state: absent
  register: img_dir
  delegate_to: localhost
