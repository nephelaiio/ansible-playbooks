---
- name: Install AWS cli

  hosts: local

  tasks:

    - name: install packages
      local_action:
        module: pip
        name: 
          - awscli
      become: yes

    - name: create inventory groups
      local_action:
        module: lineinfile
        line: '[jupyter]'
        dest: 'inventory/aws'
        insertafter: EOF
        create: yes


- name: Provision jupyter.nephelai.io artifacts

  hosts: local

  vars_files: 
    - vars/nephelai.yml

  tasks:

    - name: retrieve vpc_id
      local_action: command aws ec2 describe-vpcs --region {{ region }} --filters "Name=tag:Name,Values={{ vpc_name }}" --query "Vpcs[*].VpcId" --output text
      register: vpc_id
      changed_when: false

    - name: retrieve image id
      local_action:
        module: ec2_ami_find
        name: "{{ ami_name }}"
        owner: "{{ ami_owner }}"
        sort: name
        sort_order: descending
        sort_end: 1
        region: "{{ region }}"
      register: ami
      changed_when: false

    - name: retrieve subnet id
      local_action: command aws ec2 describe-subnets --region {{ region }} --filter Name=vpc-id,Values={{ vpc_id.stdout }},Name=availability-zone,Values={{ region }}{{availability_zone}} --query "Subnets[*].SubnetId" --output text
      register: subnet_id
      changed_when: false

    - name: delete jupyter security group
      local_action:
        module: ec2_group
        name: jupyter
        region: "{{ region }}"
        description: Jupyter access group
        state: absent

    - name: create http security group
      local_action:
        module: ec2_group
        name: httpd
        region: "{{ region }}"
        description: HTTP access group
        state: present
        vpc_id: "{{ vpc_id.stdout }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: icmp
            from_port: 8
            to_port: -1
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: tcp
            from_port: 0
            to_port: 65535
            cidr_ip: 0.0.0.0/0
          - proto: udp
            from_port: 0
            to_port: 65535
            cidr_ip: 0.0.0.0/0
          - proto: icmp
            from_port: 8
            to_port: -1
            cidr_ip: 0.0.0.0/0

    - name: retrieve instance ids
      local_action: command aws ec2 describe-instances --region {{ region }} --filter Name=client-token,Values={{ instance_id }} --query "Reservations[].Instances[].InstanceId"
      register: instance_query
      changed_when: false

    - block:

      - name: provision jupyter instances
        local_action:
          module: ec2
          region: "{{ region }}"
          vpc_subnet_id: "{{ subnet_id.stdout }}"
          instance_type: "{{ instance_type }}"
          id: "{{ instance_id }}"
          image: "{{ ami.results[0].ami_id }}"
          wait: true
          state: "{{ state }}"
          count: "{{ instance_count }}"
          key_name: "{{ key }}"
          groups:
            - httpd
        register: ec2

      - name: provision persistent inventory
        local_action:
          module: lineinfile
          dest: 'inventory/aws'
          insertafter: '[jupyter]'
          line: "{{ item.public_dns_name }} id={{ item.id }}"
          create: true
          state: "{{ state }}"
        with_items: "{{ ec2.instances }}"

      - name: provision in-memory inventory
        local_action:
          module: add_host
          groups: jupyter
          name: "{{ item.public_dns_name }}"
        with_items: "{{ ec2.instances }}"

      - name: select route53 operation
        set_fact:
          route53_state: delete
        when:
          state == 'absent'

      - name: provision route53 record
        local_action:
          module: route53
          command: "{{ route53_state }}"
          zone: nephelai.io
          record: jupyter.nephelai.io
          value: "{{ ec2.instances | map(attribute='public_ip') | join(' ') }}"
          type: A
          overwrite: yes

      when: state in ['present', 'absent']

    - name: tag instances
      local_action:
        module: ec2_tag
        resource: "{{ item.id }}"
        region: "{{ region }}"
        state: present
        tags: 
          stack: jupyter
      with_items: "{{ ec2.instances }}"
      when: state == 'present'


    - name: retrieve instance ids
      local_action: command aws ec2 describe-instances --region {{ region }} --filter Name=client-token,Values={{ instance_id }} --query "Reservations[].Instances[].InstanceId"
      register: instance_query
      changed_when: false

    - name: manage jupyter instances
      local_action:
        module: ec2
        region: "{{ region }}"
        wait: true
        id: "{{ instance_id }}"
        state: "{{ state }}"
        instance_ids: "{{ instance_query.stdout|from_json }}"
      when: 
        - "{{ instance_query.stdout|from_json|length > 0 }}"
        - not state in ['present']

    - block:

      - name: wait for ssh
        local_action:
          module: wait_for
          host: "{{ item.public_ip }}"
          port: 22
          state: started
        with_items: "{{ ec2.instances }}"

      - name: install packages
        package:
          name: 
            - nginx
        become: yes

      - name: start nginx
        systemd:
          name: nginx
          state: started
          enabled: yes
        become: yes

      when: not state in ['stopped', 'absent']
