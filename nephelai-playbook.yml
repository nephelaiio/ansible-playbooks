---
- hosts: local

  name: Install AWS cli

  tasks:

    - name: install packages
      pip:
        name: 
          - awscli
      become: yes

    - name: create inventory groups
      lineinfile:
        line: '[jupyter]'
        dest: 'inventory/aws'
        insertafter: EOF
        create: yes


- hosts: local

  name: Provision jupyter.nephelai.io

  vars:
    vpc_name: default
    region: us-east-1
    availability_zone: a
    action: present
    instance_type: p2.xlarge
    instance_count: 1
    instance_id: jupyter01
    ami_owner: 099720109477
    ami_name: "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*"

  tasks:

    - name: retrieve vpc_id
      local_action: command aws ec2 describe-vpcs --region {{ region }} --filters "Name=tag:Name,Values={{ vpc_name }}" --query "Vpcs[*].VpcId" --output text
      register: vpc_id
      changed_when: false

    - name: retrieve image id
      local_action:
        module: ec2_ami_find
        name: "{{ ami_name }}"
        owner: "{{ ami_owner }}"
        sort: name
        sort_order: descending
        sort_end: 1
        region: "{{ region }}"
      register: ami
      changed_when: false

    - name: retrieve subnet id
      local_action: command aws ec2 describe-subnets --region {{ region }} --filter Name=vpc-id,Values={{ vpc_id.stdout }},Name=availability-zone,Values={{ region }}{{availability_zone}} --query "Subnets[*].SubnetId" --output text
      register: subnet_id
      changed_when: false

    - name: delete jupyter security group
      local_action:
        module: ec2_group
        name: jupyter
        region: "{{ region }}"
        description: Jupyter access group
        state: absent

    - name: create http security group
      local_action:
        module: ec2_group
        name: httpd
        region: "{{ region }}"
        description: HTTP access group
        state: present
        vpc_id: "{{ vpc_id.stdout }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: icmp
            from_port: 8
            to_port: -1
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: tcp
            from_port: 0
            to_port: 65535
            cidr_ip: 0.0.0.0/0
          - proto: udp
            from_port: 0
            to_port: 65535
            cidr_ip: 0.0.0.0/0
          - proto: icmp
            from_port: 8
            to_port: -1
            cidr_ip: 0.0.0.0/0

    - name: retrieve instance ids
      local_action: command aws ec2 describe-instances --region {{ region }} --filter Name=client-token,Values={{ instance_id }} --query "Reservations[].Instances[].InstanceId"
      register: instance_query

    - name: register instance ids
      set_fact:
        instances: "{{ instance_query.stdout|from_json }}"

    - debug:
        var: instances

    - name: create jupyter instances
      local_action:
        module: ec2
        region: "{{ region }}"
        vpc_subnet_id: "{{ subnet_id.stdout }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami.results[0].ami_id }}"
        wait: true
        state: "{{ action }}"
        id: "{{ instance_id }}"
        count: "{{ instance_count }}"
        groups:
          - httpd
      register: ec2
      when: instances|length == 0

    - name: manage jupyter instances
      local_action:
        module: ec2
        region: "{{ region }}"
        vpc_subnet_id: "{{ subnet_id.stdout }}"
        instance_type: "{{ instance_type }}"
        image: "{{ ami.results[0].ami_id }}"
        wait: true
        state: "{{ action }}"
        id: "{{ instance_id }}"
        instance_ids: "{{ instances }}"
        count: "{{ instance_count }}"
        groups:
          - httpd
      register: ec2
      when: 
        - instances|length > 0
        - action != 'present'

    - debug:
        var: ec2

    - name: add instances to persistent inventory
      local_action:
        module: line_in_file
        dest: 'inventory/hosts'
        insertafter: '[jupyter]'
        line: "{{ item.public_ip }} id={{ item.id }}"
      with_items: "{{ ec2.instances }}"

    - name: tag instances
      local_action:
        module: ec2_tag
        resource: "{{ item.id }}"
        region: "{{ region }}"
        state: present
        tags: 
          stack: jupyter
      with_items: "{{ ec2.instances }}"

    - name: wait for ssh
      local_action:
        module: wait_for
        host: "{{ item.public_ip }}"
        port: 22
        state: started
      with_items: "{{ ec2.instances }}"
