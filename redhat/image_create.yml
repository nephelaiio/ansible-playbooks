---
- name: create temporary target directory
  tempfile:
    state: directory
    prefix: img
  register: tmpdir_dest

- name: register target root directory
  set_fact:
    root_dir: "{{ tmpdir_dest.path }}/root"

- name: register target boot directory
  set_fact:
    boot_dir: "{{ tmpdir_dest.path }}/boot"

- name: create target directories
  file:
    path: "{{ dir }}"
    state: directory
  loop_control:
    loop_var: dir
  with_items:
    - "{{ root_dir }}"
    - "{{ boot_dir }}"

- name: create image target directory
  file:
    state: directory
    path: files/images

- name: register target redhat iso file
  set_fact:
    dest_img: "{{ redhat_target_image_path }}/{{ redhat_host.hostname }}.img"

- name: copy redhat archive image
  copy:
    src: "{{ redhat_source_image }}"
    dest: "{{ dest_img }}.xz"
    remote_src: yes

- name: unarchive redhat image
  command: "unxz -f {{ dest_img }}.xz"

- name: inspect redhat root partition offset
  shell: "parted {{ dest_img }} -m unit B print | awk -F':' '/ext4/ && !/boot/ {print $2}' | awk -F'B' '{ print $1 }'"
  register: root_offset

- name: calculate redhat root partition offset
  set_fact:
    redhat_root_offset: "{{ root_offset.stdout | int }}"

- name: inspect redhat root partition size
  shell: "parted {{ dest_img }} -m unit B print | awk -F':' '/ext4/ && !/boot/ {print $4}' | awk -F'B' '{ print $1 }'"
  register: root_size

- name: calculate redhat root partition size
  set_fact:
    redhat_root_size: "{{ root_size.stdout | int }}"

- name: mount redhat root partition
  command: "mount -o offset={{ redhat_root_offset }},sizelimit={{ redhat_root_size }} {{ dest_img }} {{ tmpdir_dest.path }}"
  args:
    warn: no

- name: inspect redhat boot partition offset
  shell: "parted {{ dest_img }} -m unit B print | awk -F':' '/ext4/ && /boot/ {print $2}' | awk -F'B' '{ print $1 }'"
  register: boot_offset

- name: calculate redhat boot partition offset
  set_fact:
    redhat_boot_offset: "{{ boot_offset.stdout | int }}"

- name: inspect redhat boot partition size
  shell: "parted {{ dest_img }} -m unit B print | awk -F':' '/ext4/ && /boot/ {print $4}' | awk -F'B' '{ print $1 }'"
  register: boot_size

- name: calculate redhat boot partition size
  set_fact:
    redhat_boot_size: "{{ boot_size.stdout | int }}"

- name: mount redhat boot partition
  command: "mount -o offset={{ redhat_boot_offset }},sizelimit={{ redhat_boot_size }} {{ dest_img }} {{ tmpdir_dest.path }}/boot"
  args:
    warn: no

- name: set hostname
  copy:
    dest: "{{ tmpdir_dest.path }}/etc/sysconfig/network"
    content: "HOSTNAME={{ redhat_host.hostname }}"
    force: yes
    mode: 0644

- name: update hosts file
  lineinfile:
    path: "{{ tmpdir_dest.path }}/etc/hosts"
    regexp: "^127.0.1.1"
    line: "127.0.1.1       {{ redhat_host.hostname }} {{ redhat_host.hostname | split_with('.') | first }}"
    insertafter: EOF

- name: disable mac based interface naming
  lineinfile:
    path: "{{ tmpdir_dest.path }}/etc/default/grub"
    regexp: "^GRUB_CMDLINE_LINUX="
    line: 'GRUB_CMDLINE_LINUX="biosdevname=0 net.ifnames=0"'
    insertafter: EOF
  when: false

- name: configure interfaces
  template:
    src: templates/images/interface.redhat.j2
    dest: "{{ tmpdir_dest.path }}/etc/sysconfig/network-scripts/ifcfg-{{ iface.name }}"
  loop_control:
    loop_var: iface
  with_items: "{{ redhat_host.ifaces }}"

- name: find ssh user id
  stat:
    path: "{{ tmpdir_dest.path }}/{{ redhat_user }}"
  register: redhat_user_stat

- name: create ssh user directory
  file:
    state: directory
    path: "{{ tmpdir_dest.path }}/root/.ssh"
    owner: "{{ redhat_user_stat.stat.uid }}"
    group: "{{ redhat_user_stat.stat.gid }}"
    mode: 0700

- name: copy ssh user key
  copy:
    content: "{{ redhat_user_pubkey }}"
    dest: "{{ tmpdir_dest.path }}/root/.ssh/authorized_keys"
    owner: "{{ redhat_user_stat.stat.uid }}"
    group: "{{ redhat_user_stat.stat.gid }}"
    mode: 0600

- name: disable ssh password logins
  lineinfile:
    regexp: '^#?PasswordAuthentication'
    line: "PasswordAuthentication no"
    dest: "{{ tmpdir_dest.path }}/etc/ssh/sshd_config"

- name: install fedora wifi firmware requirements
  get_url:
    url: "https://fedora.roving-it.com/brcmfmac43430-sdio.txt"
    dest: "{{ tmpdir_dest.path }}/lib/firmware/brcm/brcmfmac43430-sdio.txt"

- name: unmount redhat target image
  command: "umount {{ mntitem }}"
  args:
    warn: no
  loop_control:
    loop_var: mntitem
  with_items:
    - "{{ tmpdir_dest.path }}/boot"
    - "{{ tmpdir_dest.path }}"

- name: remove temporary directories
  file:
    path: "{{ tmpitem }}"
    state: absent
  with_items:
    - "{{ tmpdir_dest.path }}"
  loop_control:
    loop_var: tmpitem
