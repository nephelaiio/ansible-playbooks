#!/usr/bin/env bash


ANSIBLE_VAULT_ID_MATCH=${TRUE}
unset ANSIBLE_VAULT_IDENTITY_LIST
unset ANSIBLE_VAULT_PASSWORD_FILE

# global definitions
KO=1
OK=0
TRUE=0
FALSE=1
DEBUG=${FALSE}

function help {
    echo "$0 OPTIONS <playbook> [ <playbook> ... ]"
    echo
    echo "OPTIONS:"
    echo "   --vault-id   <vault>       # vault-id for key/rekey"
    echo "  [--vault-dir] <dir>         # vault password file location"
    echo "  [--directory] <dir>         # path to scan for secrets"
    echo "  [--file]      <file>        # limit scan to single file,"
    echo "                              # --directory is ignored when this is set"
    echo "  [--var]       <variable>    # limit rekey to single variable"
    echo "  [--generate]                # generate new vault password"
    echo "  [--verify]                  # restrict rekey to matching vault-ids"
    echo "  [--debug]"
}

function debug {
    if [ "${DEBUG}" -eq "${TRUE}" ]; then
        echo "$@"
    fi
}

# see https://stackoverflow.com/a/25288289/6860267
pushd () {
    command pushd "$@" > /dev/null
}
popd () {
    command popd "$@" > /dev/null
}

function check_requirement {
    cmd=$1
    command -v "${cmd}" >/dev/null 2>&1 || {
        echo "${cmd} not found, aborting"
        exit "${ERROR}"
    }
}

function genxkpass() {
    printf "%02d@%s@%02d\\n" $(($RANDOM % 100)) $(xkcdpass -n 3 -C alternating -d _) $(($RANDOM % 100))
}

check_requirement ansible-vault
check_requirement yq
check_requirement curl
check_requirement egrep

# set default values
REKEY_FORCE=${FALSE}
VAULT_VERIFY=${FALSE}
TMPROOT=temp
TMPDIR=$(mktemp -d --tmpdir=${TMPROOT} --suffix=.rekey)

# parse options (https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash)
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        --vault-id)
            VAULT_PASS_ID="$2"
            shift # past argument
            shift # past value
            ;;
        --vault-dir)
            ANSIBLE_VAULT_IDENTITY_DIR="$2"
            shift # past argument
            shift # past value
            ;;
        --directory)
            REKEY_DIR="$2"
            shift # past argument
            shift # past value
            ;;
        --var)
            REKEY_VAR="$2"
            shift # past argument
            shift # past value
            ;;
        --file)
            REKEY_FILES="$2"
            shift # past argument
            shift # past value
            ;;
        --rekey)
            REKEY_FORCE=${TRUE}
            shift # past argument
            shift # past value
            ;;
        --verify)
            VAULT_VERIFY=${TRUE}
            shift # past argument
            shift # past value
            ;;
        --help)
            help
            exit ${SUCCESS}
            ;;
        --debug)
            DEBUG=${TRUE}
            AWXCLI_VERBOSE="--verbose"
            shift # past argument
            ;;
        *)  # unknown option
            POSITIONAL+=("$1") # save it in an array for later
            shift # past argument
            ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# validate options
if [ -z "${ANSIBLE_VAULT_IDENTITY_DIR}" ]; then
    ANSIBLE_VAULT_IDENTITY_DIR="${HOME}/.ansible_vault"
fi
if [ -z "${VAULT_PASS_ID}" ]; then
    echo "--vault-id <vault id> option is required"
    exit ${KO}
fi
if [ -z "${REKEY_DIR}" ]; then
    echo "--directory <path> option is required"
    exit ${KO}
fi
if [ -z "${REKEY_FILES}" ]; then
    REKEY_FILES=$(find "${REKEY_DIR}" -name "*.yml" -type f)
fi
if [ ${#POSITIONAL[@]} -gt 0 ]; then
    echo "Unknown positional arguments ${POSITIONAL[@]}"
    exit ${KO}
fi

# set derived values
VAULT_PASS_FILE="${ANSIBLE_VAULT_IDENTITY_DIR}/${VAULT_PASS_ID}"
GENVAULT="${TMPDIR}/new/$(basename ${VAULT_PASS_FILE})"

debug "Verify vault password directory $(dirname ${VAULT_PASS_FILE})"
if [ ! -d "$(dirname ${VAULT_PASS_FILE})" ]; then
    mkdir "$(dirname ${VAULT_PASS_FILE})"
    debug "Created vault password file directory $(dirname ${VAULT_PASS_FILE})"
fi

debug "Generating new vault password file"
mkdir "$(dirname ${GENVAULT})"
if [ ${REKEY_FORCE} -eq ${TRUE} ]; then
    debug "Generating new vault password"
    echo "$(genxkpass)" > "${GENVAULT}"
else
    if [ -f "${VAULT_PASS_FILE}" ]; then
        cp "${VAULT_PASS_FILE}" "${GENVAULT}"
    else
        echo "missing vault password file ${VAULT_PASS_FILE} ... aborting"
        exit ${KO}
    fi
fi

debug "Creating working copy of vault file dir [${ANSIBLE_VAULT_IDENTITY_DIR}]"
TMPVAULTS="${TMPDIR}/vaults"
mkdir "${TMPVAULTS}"
VAULT_NAMES=$(find "${ANSIBLE_VAULT_IDENTITY_DIR}/" -type f | xargs -L 1 basename)
for vault_name in ${VAULT_NAMES}; do
    cp -a "${ANSIBLE_VAULT_IDENTITY_DIR}/${vault_name}" "${TMPVAULTS}/${vault_name}"
done

debug Inspecting files [${REKEY_FILES}]
for file_name in $REKEY_FILES; do

    debug "Processing file ${file_name}"
    if [ -z "${REKEY_VAR}" ]; then
        REKEY_VARS=$(egrep "^[^ ].*:\s+\!vault" "${file_name}" -h | cut -d ':' -f 1)
    else
        REKEY_VARS="${REKEY_VAR}"
    fi

    if [ "${REKEY_VARS}" != "" ]; then

        for var_name in ${REKEY_VARS}; do

            debug "Processing ${file_name}:${var_name}"
            encrypted=$(yq r "${file_name}" "${var_name}")
            if [ $? -ne 0 ]; then
                echo "error retrieving secret ${var_name} from file ${file_name}"
                exit "${KO}"
            fi

            if [[ $encrypted =~ ^\$ANSIBLE_VAULT.* ]]; then

                if ! [[ "$encrypted" =~ "^\$ANSIBLE_VAULT;([^;]+;){2};${VAULT_PASS_ID}\n.*$" ]]; then
                    if [ ${VAULT_VERIFY} -eq ${TRUE}  ]; then
                        echo "Ignoring ${file_name}:${var_name} with mismatched vault id"
                        continue
                    fi
                fi

                decrypt_success=${KO}
                debug Processing vaults [${VAULT_NAMES}]
                for vault in ${VAULT_NAMES}; do

                    debug "Decrypting ${file_name}:${var_name} with vault ${vault}"
                    decrypted=$(
                        echo -n "${encrypted}" |
                            ansible-vault decrypt --vault-id "${vault}@${TMPVAULTS}/${vault}" 2>/dev/null
                             )
                    if [ $? -ne 0 ]; then
                        continue;
                    else
                        decrypt_success=${OK}
                    fi

                done
                if [ $decrypt_success -ne ${OK} ]; then
                    echo "Error decrypting secret ${var_name} from ${file_name}"
                    exit "${KO}"
                fi

            else
                debug "Encrypting ${file_name}:${var_name} from plaintext"
                decrypted=${encrypted}
            fi

            pushd "$(dirname ${GENVAULT})"
            recrypted=$(
                export ANSIBLE_VAULT_PASSWORD_FILE="$(basename ${GENVAULT})" ;
                export ANSIBLE_VAULT_IDENTITY_LIST="${VAULT_PASS_ID}@$(basename ${GENVAULT})" ;
                echo "${decrypted}" |
                    ansible-vault encrypt_string --encrypt-vault-id "${VAULT_PASS_ID}" --vault-password-file $(basename ${GENVAULT})
                     )
            if [ $? -ne 0 ]; then
                echo "error encrypting secret ${var_name} from file ${file_name}"
                exit "${KO}"
            fi
            popd

            TMPFILE="${TMPDIR}/$(basename ${file_name})"
            echo "---" > "${TMPFILE}"
            echo "${var_name}: ${recrypted}" >> "${TMPFILE}"
            yq m -x -i "${file_name}" "${TMPFILE}" -I 2
            echo "Writing ${file_name}"
            echo "---" > "${TMPFILE}"
            cat "${file_name}" >> "${TMPFILE}"
            mv "${TMPFILE}" "${file_name}"

            echo "${file_name}:${var_name}:"
            echo "          ${recrypted}"

        done

    fi

done

debug "Replacing vault file ${VAULT_PASS_FILE} with newly generated secret"
if [ ${REKEY_FORCE} -eq ${TRUE} ]; then
    if [ -f "${VAULT_PASS_FILE}" ]; then
        mv "${VAULT_PASS_FILE}" "${VAULT_PASS_FILE}.$(date +%Y%m%d%H%M%S)"
    fi
    mv "${GENVAULT}" "${VAULT_PASS_FILE}"
fi

rm -rf ${TMPDIR}
