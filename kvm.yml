---
- name: Create KVM guests

  hosts: kvm

  become: yes

  vars:

    provisioning_groups:
      - kvm_guests
    nat_in: br1
    nat_out:
      - br0
    img_dir: "{{ playbook_dir }}/files/kvm"
    ansible_kvm_user: teddyphreak

  roles:

    - nephelaiio.plugins

  tasks:

    - name: include variable definitions
      include_vars:
        dir: "{{ variables }}"

    - name: include os variable overrides
      include_vars: "{{ item }}"
      with_first_found:
        - files:
            - "vars/{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
            - "vars/{{ ansible_distrubition | lower }}.yml"
            - "vars/{{ ansible_os_family | lower }}.yml"
          skip: true

    - name: configure bridging
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        sysctl_set: yes
        reload: yes
      with_items:
        - name: net.bridge.bridge-nf-call-ip6tables
          value: 0
        - name: net.bridge.bridge-nf-call-iptables
          value: 0
        - name: net.bridge.bridge-nf-call-arptables
          value: 0
        - name: net.ipv4.ip_forward
          value: 1

    - block:

        - name: install pacman requirements
          package:
            name:
              - qemu
              - libvirt
              - libvirt-python
              - bridge-utils
              - dnsmasq
              - ebtables
              - dmidecode
              - cloud-init
              - cdrtools
              - python-lxml
              - dhcp
            update_cache: yes

        - name: configure dhcp
          template:
            src: dhcp/dhcpd.conf.j2
            dest: /etc/dhcpd.conf
          vars:
            lease_time: 1800
            networks:
              - "{{ nets.kvm }}"
            zones: "{{ dns.zones.values() }}"
          notify: restart dhcpd

        - name: initialize iptables configuration
          file:
            path: "{{ iptables_savefile }}"
            state: touch

        - name: manage services
          service:
            name: "{{ item }}"
            state: started
            enabled: yes
          with_items:
            - dhcpd4  # dhcpd4 (arch) | isc-dhcp-server (debian)

      when: ansible_os_family == 'Archlinux'

    - block:

        - name: install apt requirements
          package:
            name:
              - qemu-kvm
              - qemu-utils
              - libvirt0
              - python-libvirt
              - bridge-utils
              - ebtables
              - dmidecode
              - python-lxml
              - genisoimage
              - isc-dhcp-server

        - name: configure dhcp
          template:
            src: dhcp/dhcpd.conf.j2
            dest: /etc/default/isc-dhcp-server
          vars:
            iface: "{{ nat_in }}"
          notify: restart dhcpd

        - name: configure iptables configuration autoload
          lineinfile:
            path: /etc/network/interfaces
            insertafter: "^iface {{ item }} inet"
            line: "    pre-up iptables-restore < {{ iptables_savefile }}"
          with_items: "{{ nat_out }}"

        - name: manage services
          service:
            name: "{{ item }}"
            state: started
            enabled: yes
          with_items:
            - isc-dhcp-server  # dhcpd4 (arch) | isc-dhcp-server (debian)

      when: ansible_os_family == 'Debian'

    - meta: flush_handlers

    - name: configure nat
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: "{{ item }}"
        jump: MASQUERADE
      with_items: "{{ nat_out }}"

    - name: configure nat
      iptables:
        chain: FORWARD
        in_interface: "{{ item }}"
        out_interface: "{{ nat_in }}"
        match: state
        ctstate: RELATED,ESTABLISHED
        jump: ACCEPT
      with_items: "{{ nat_out }}"

    - name: configure nat
      iptables:
        chain: FORWARD
        in_interface: "{{ nat_in }}"
        out_interface: "{{ item }}"
        jump: ACCEPT
      with_items: "{{ nat_out }}"

    - name: save iptables configuration
      shell: "iptables-save > {{ iptables_savefile }}"

    - name: install requirements
      package:
        name: "{{ kvm_requirement_packages }}"

    - name: create image target directory
      file:
        path: files/kvm
        state: directory

    - meta: flush_handlers

    - name: define groups
      set_fact:
        loop_groups: "{{ loop_groups | default([]) + [ {'hostnames': groups[groupitem] } ] }}"
      loop_control:
        loop_var: groupitem
      with_items: "{{ provisioning_groups }}"

    - name: manage vms
      include_tasks: kvm/vm_manage.yml
      vars:
        name: "{{ item.1 }}"
        ansible_guest_user: "{{ users[ansible_kvm_user] }}"
        ansible_guest_username: "{{ ansible_guest_user.username }}"
        ansible_guest_password: "{{ ansible_guest_user.password }}"
        ansible_guest_ssh_key: "{{ ansible_guest_user.pubkey }}"
      with_subelements:
        - "{{ loop_groups }}"
        - hostnames
      no_log: "{{ kvm_nolog }}"

  handlers:

    - name: restart dhcpd
      service:
        name: "{{ dhcp_service }}"
        state: restarted
