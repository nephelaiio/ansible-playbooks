---
- name: Create KVM guests

  hosts: kvm

  vars:

    iptables_savefile: /etc/iptables/iptables.rules

  roles:

    - nephelaiio.plugins

  tasks:

    - name: configure bridging
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        sysctl_set: yes
        reload: yes
      become: yes
      with_items:
        - name: net.bridge.bridge-nf-call-ip6tables
          value: 0
        - name: net.bridge.bridge-nf-call-iptables
          value: 0
        - name: net.bridge.bridge-nf-call-arptables
          value: 0
        - name: net.ipv4.ip_forward
          value: 1

    - name: initialize iptables configuration
      file:
        path: /etc/iptables/iptables.rules
        state: touch
      become: yes

    - name: start iptables
      service:
        name: iptables
        state: started
        enabled: yes
      become: yes

    - name: configure nat forwarding
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: br0
        jump: MASQUERADE
      become: yes

    - name: configure nat forwarding
      iptables:
        chain: FORWARD
        in_interface: br1
        jump: ACCEPT
      become: yes

    - name: configure nat forwarding
      iptables:
        chain: FORWARD
        out_interface: br1
        jump: ACCEPT
      become: yes

    - name: save iptables configuration
      shell: "iptables-save > {{ iptables_savefile }}"
      become: yes

    - name: Install pacman requirements
      package:
        name:
          - qemu
          - libvirt
          - libvirt-python
          - bridge-utils
          - dnsmasq
          - ebtables
          - dmidecode
          - cloud-init
          - cdrtools
          - python-lxml
        update_cache: yes
      when: ansible_os_family == "Archlinux"
      become: yes

    - name: Install apt requirements
      package:
        name:
          - qemu-kvm
          - qemu-utils
          - libvirt0
          - python-libvirt
          - bridge-utils
          - ebtables
          - dmidecode
          - python-lxml
          - genisoimage
        update_cache: yes
      when: ansible_os_family == "Debian"
      become: yes

    - name: Create image target directory
      local_action:
        module: file
        path: files/kvm
        state: directory

    - name: Fetch images
      local_action:
        module: get_url
        url: "{{ item.value.src }}"
        dest: "files/kvm/{{ item.value.src | basename }}"
        mode: 0644
      with_dict: "{{ kvm_images }}"

    - name: Uncompress images
      local_action: >-
        command qemu-img convert -O {{ format }} {{ img }} {{ target }}
        chdir="files/kvm"
        creates="{{ target }}"
      vars:
        format: "{{ item.value.format }}"
        img: "{{ item.value.src | basename }}"
        target: "{{ item.value.src | basename | with_ext(item.value.format) }}"
      with_dict: "{{ kvm_images }}"

    - meta: flush_handlers

    - name: Destroy VMs
      include: kvm/vm_destroy.yml
      vars:
        vm: "{{ kvm.defaults.vm | combine(item, recursive='true') }}"
        pool: "{{ kvm.pools[vm.pool].path }}"
        iso: "{{ pool }}/cloud_init_{{ vm.name }}.iso"
      with_items: "{{ kvm.vms.values() }}"
      static: no

    - name: Create VMs
      include: kvm/vm_create.yml
      vars:
        vm: "{{ kvm.defaults.vm | combine(item, recursive='true') }}"
        img: "{{ kvm_images[vm.image].src | basename | with_ext(kvm_images[vm.image].format) }}"
        pool: "{{ kvm.pools[vm.pool].path }}"
        iso: "{{ pool }}/cloud_init_{{ vm.name }}.iso"
      with_items: "{{ kvm.vms.values() }}"
      static: no
