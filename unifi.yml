---
- name: Configure Unifi Controller

  hosts: unifi

  become: yes

  roles:

    - nephelaiio.plugins
    - geerlingguy.pip

  vars:

    unifi_certificate_hostname: "{{ unifi_hostname }}"
    unifi_certificate_chainfile: "/etc/nginx/{{ unifi_certificate_hostname }}.chain.crt"
    unifi_certificate_keyfile: "/etc/nginx/{{ unifi_certificate_hostname }}.key"

  tasks:

    - name: load private variables
      include_vars:
        dir: "{{ variables }}"

    - name: install nginx
      include_role:
        name: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: true

    - include_tasks: letsencrypt.yml
      vars:
        certificate_hostname: "{{ unifi_certificate_hostname }}"
        certificate_chainfile: "{{ unifi_certificate_chainfile }}"
        certificate_keyfile: "{{ unifi_certificate_keyfile }}"

    - name: configure nginx
      include_role:
        name: geerlingguy.nginx
      vars:
        nginx_vhosts:
          - listen: "443 ssl"
            server_name: "{{ unifi_certificate_hostname }}"
            filename: "{{ unifi_certificate_hostname }}.https.conf"
            root: /var/www/html/unifi
            access_log: "/var/log/nginx/{{ unifi_certificate_hostname }}.access.log"
            error_log: "/var/log/nginx/{{ unifi_certificate_hostname }}.error.log"
            extra_parameters: |
              keepalive_timeout   300;
              ssl_certificate {{ unifi_certificate_chainfile }};
              ssl_certificate_key {{ unifi_certificate_keyfile }};
              ssl_session_cache   shared:SSL:10m;
              ssl_session_timeout 10m;
              ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
              ssl_prefer_server_ciphers on;
              ssl_stapling on;
              ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA;
              add_header Strict-Transport-Security max-age=31536000;
              add_header X-Frame-Options DENY;
              proxy_cache off;
              proxy_store off;
              location / {
                proxy_redirect          off;
                proxy_pass_header       Server;
                proxy_set_header        X-Real-IP $remote_addr;
                proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header        X-Scheme $scheme;
                proxy_set_header        Host $http_host;
                proxy_set_header        X-NginX-Proxy true;
                proxy_connect_timeout   5;
                proxy_read_timeout      240;
                proxy_intercept_errors  on;
                proxy_pass https://localhost:8443/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
              }

    - name: install unifi
      include_role:
        name: nephelaiio.unifi-controller

    - name: install pip requirements
      pip:
        name: dnspython
        state: latest
      delegate_to: "{{ groups['pdns'] | first }}"

    - name: update unifi pdns record
      uri:
        url: "{{ pdns_url }}/api/v1/servers/localhost/zones/{{ unifi_url_zone }}"
        method: PATCH
        return_content: yes
        body_format: json
        body:
          rrsets:
            - name: "{{ unifi_url_host }}"
              type: A
              ttl: 3600
              changetype: REPLACE
              records:
                - content: "{{ ansible_default_ipv4.address }}"
                  disabled: no
                  set-ptr: no
                  comments: []
        headers:
          X-API-Key: "{{ pdns_api_key }}"
        status_code: 204
      vars:
        unifi_url_host: "{{ unifi_url | urlsplit('hostname') }}."
        unifi_url_zone: "{{ unifi_url_host | split_with('.') | tail | join('.') }}"
      register: pdns_zones_query

    - name: create vhost roots
      file:
        state: directory
        path: "{{ item }}"
      with_items: "{{ nginx.vhosts.values() | list | map(attribute='root') | list }}"
