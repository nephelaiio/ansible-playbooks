" neobundle configuration
if !1 | finish | endif

if has('vim_starting')
  set nocompatible
  set runtimepath+=~/{{ vim_plugins }}/neobundle.vim/
endif

filetype off
call neobundle#begin(expand('~/{{ vim_plugins }}'))

" my bundles
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'godlygeek/tabular'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-sensible'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'int3/vim-extradite'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'moll/vim-bbye'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'honza/vim-snippets'
NeoBundle 'markcornick/vim-vagrant'
NeoBundle 'rking/ag.vim'
NeoBundle 'pearofducks/ansible-vim'
NeoBundle 'PotatoesMaster/i3-vim-syntax'

call neobundle#end()

NeoBundleCheck

filetype plugin indent on

" general customizations
let mapleader=","

set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set autoindent
set incsearch
set number

filetype plugin on
set omnifunc=syntaxcomplete#Complete

nnoremap & :&&<CR>
xnoremap & :&&<CR>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>wv :so $MYVIMRC<CR>

" fugitive / extradite settings
function! NonintrusiveGitGrep(term)
  execute "copen"
  " Map 't' to open selected item in new tab
  execute "nnoremap <silent> <buffer> t <C-W><CR><C-W>T"
  execute "silent! Ggrep " . a:term
  execute "redraw!"
endfunction
command! -nargs=1 GGrep call NonintrusiveGitGrep(<q-args>)
nmap <leader>gs :Gstatus<CR>
nmap <leader>gg :copen<CR>:GGrep 
nmap <leader>gl :Extradite!<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gb :Gblame<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gp :Gpush<CR>
function! CommittedFiles()
  " Clear quickfix list
  let qf_list = []
  " Find files committed in HEAD
  let git_output = system("git diff-tree --no-commit-id --name-only -r HEAD\n")
  for committed_file in split(git_output, "\n")
    let qf_item = {'filename': committed_file}
    call add(qf_list, qf_item)
  endfor
  " Fill quickfix list with them
  call setqflist(qf_list, '')
endfunction
nnoremap <silent> <leader>g? :call CommittedFiles()<CR>:copen<CR>

" conque settings
nnoremap <Leader>tv :ConqueTermVSplit bash<cr>
nnoremap <Leader>th :ConqueTermSplit bash<cr>
nnoremap <Leader>tt :ConqueTermTab bash<cr>

" vagrant settings
nnoremap <Leader>vi :Vagrant init<cr>
nnoremap <Leader>vu :Vagrant up<cr>
nnoremap <Leader>vs :Vagrant status<cr>
nnoremap <Leader>vd :Vagrant destroy<cr>

" bbye settings
nnoremap <Space> :
nnoremap <Leader>q :Bdelete<cr>
nnoremap <Leader>Q :Bdelete!<cr>

" slime settings
let g:slime_target = "tmux"
nnoremap <Leader>ss :SlimeSend<cr>

" ultisnips settings
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsListSnippets="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" silversearcher settings
nnoremap \ :Ag<SPACE>

" gui console settings
if has("gui_running")
  if has("gui_gtk2")
    set guifont=Inconsolata\ 9
  elseif has("gui_macvim")
    set guifont=Menlo\ Regular:h10
  elseif has("gui_win32")
    set guifont=Consolas:h9:cANSI
  endif
endif
