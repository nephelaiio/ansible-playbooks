- name: Create ovirt centos guests

  hosts: ovirt_guests

  gather_facts: no

  vars:

    ovirt_state_default: running

  roles:

    - nephelaiio.plugins

  tasks:

    - block:

        - name: install ovirt sdk
          pip:
            name: ovirt-engine-sdk-python
          changed_when: false
          run_once: yes
          become: yes

        - name: set vm profile facts
          set_fact:
            vm_profile_template: "{{ ovirt_profiles[hostvars[inventory_hostname].vm_profile | default(default_vm_profile)] }}"
            vm_attr_defaults:
              name: "{{ inventory_hostname }}"
              vm_state: "{{ ovirt_state_default }}"
            vm_hostvars: "{{ hostvars[inventory_hostname] }}"
          tags:
            - always

        - name: set vm profile
          set_fact:
            vm: "{{ vm_profile_template | combine(vm_attr_defaults, vm_hostvars, recursive=true) }}"
          tags:
            - always

        - name: query storage domains
          ovirt_storage_domain_facts:
            auth: "{{ ovirt_auth }}"
          register: ovirt_storage_domaininfo

        - name: build storage domain dict
          set_fact:
            ovirt_storage_domain_dict: "{{ ovirt_storage_domains.ovirt_storage_domains | list_to_dict('id') }}"
          vars:
            ovirt_storage_domains: "{{ ovirt_storage_domaininfo.ansible_facts if 'ansible_facts' in ovirt_storage_domaininfo else ovirt_storage_domaininfo }}"

        - block:

            - name: stop ovirt vm
              ovirt_vm:
                name: "{{ vm.name }}"
                cluster: "{{ vm.ovirt_cluster }}"
                auth: "{{ vm.ovirt_auth }}"
                state: stopped
                wait: yes

            - name: destroy ovirt vm
              ovirt_vm:
                name: "{{ vm.name }}"
                cluster: "{{ vm.ovirt_cluster }}"
                auth: "{{ vm.ovirt_auth }}"
                state: absent
                wait: yes

            - name: wait for vms to be destroyed
              pause:
                seconds: 5

          when: vm.vm_state | default(ovirt_state_default) == 'recreate'

        - name: create ovirt vm
          ovirt_vm:
            name: "{{ ovirt_vm.name }}"
            cluster: "{{ ovirt_vm.cluster }}"
            auth: "{{ ovirt_vm.ovirt_auth }}"
            state: "{{ ovirt_vm.state }}"
            cloud_init: "{{ ovirt_vm.cloud_init }}"
            cpu_cores: "{{ ovirt_vm.vm_cpu }}"
            high_availability: "{{ ovirt_vm.high_availability }}"
            template: "{{ ovirt_vm.template }}"
            operating_system: "{{ ovirt_vm.ovirt_os | default('other_linux') }}"
            nics: "{{ ovirt_vm.nics }}"
            type: server
            serial_console: yes
            wait: yes
          vars:
            ovirt_vm: "{{ vm | combine(vm_attrs) }}"
            vm_network: "{{ nets[vm.vm_network] }}"
            vm_template: "{{ vm.vm_template | default(ovirt_template_default) }}"
            vm_attrs:
              state: "{{ (vm.vm_state != 'recreate') | ternary(vm.vm_state, 'running') }}"
              cluster: "{{ vm.ovirt_cluster }}"
              cores: "{{ vm.vm_cpu }}"
              memory: "{{ vm.vm_memory }}"
              template: "{{ vm_template }}"
              high_availability: true
              nics:
                - name: nic1
                  network: "{{ vm_network.name }}"
                  profile: "{{ vm_network.name }}"
              cloud_init:
                host_name: "{{ vm.inventory_hostname }}"
                timezone: "{{ vm.ovirt_guest_timezone }}"
                user_name: "{{ vm.ovirt_guest_user }}"
                root_password: "{{ vm.ovirt_guest_pass }}"
                authorized_ssh_keys: "{{ vm.ovirt_guest_pubkey }}"
                regenerate_ssh_keys: true
                dns_servers: "{{ vm_network.ns | join(' ') }}"
                nic_boot_protocol: static
                nic_ip_address: "{{ vm.ansible_host }}"
                nic_netmask: "{{ vm_network.netmask }}"
                nic_gateway: "{{ vm_network.router }}"
                nic_name: "{{ ovirt_templates[vm_template].iface }}"
                nic_on_boot: yes
                custom_script: "{{ ovirt_templates[vm.vm_template].custom_script if 'custom_script' in ovirt_templates[vm.vm_template] else '' }}"
          register: ovirt_create
          no_log: "{{ ovirt_nolog | default(true) }}"

        - block:

            - name: manage vm nic network
              ovirt_nic:
                state: plugged
                name: nic1
                vm: "{{ vm.name }}"
                auth: "{{ vm.ovirt_auth }}"
                network: "{{ vm_network.name }}"
                profile: "{{ vm_network.name }}"
              vars:
                vm_network: "{{ nets[vm.vm_network] }}"
              no_log: "{{ ovirt_nolog | default(true) }}"

            - name: query vm disk
              ovirt_disk_facts:
                auth: "{{ vm.ovirt_auth }}"
                pattern: "vm_names={{ vm.name }}"
              register: ovirt_vm_diskinfo

            - name: resize disk
              ovirt_disk:
                state: present
                storage_domain: "{{ ovirt_storage_domain_dict[ovirt_domain_target.id].name }}"
                id: "{{ ovirt_disk_target.id }}"
                size: "{{ vm.vm_disk }}"
                auth: "{{ vm.ovirt_auth }}"
                vm_name: "{{ vm.name }}"
              vars:
                ovirt_vm_disks: "{{ ovirt_vm_diskinfo.ansible_facts if 'ansible_facts' in ovirt_vm_diskinfo else ovirt_vm_diskinfo }}"
                ovirt_disk_target: "{{ ovirt_vm_disks.ovirt_disks | first }}"
                ovirt_domain_target: "{{ ovirt_disk_target.storage_domains | first }}"
              when: "'vm_disk' in vm"
              notify: resize disk

          when: (vm.vm_state | default(ovirt_state_default)) in ['present', 'running', 'recreate']

      delegate_to: localhost

    - block:

        - name: wait for provisioning to complete
          wait_for_connection:

        - name: clean up nameserver configuration
          lineinfile:
            path: /etc/resolv.conf
            state: absent
            regexp: '10\.0\.2\.3'

        - name: gather facts
          setup:

        - name: uninstall cloud init
          package:
            name: cloud-init
            state: absent
          retries: 3
          register: package_install
          delay: 180
          until: not package_install.failed

        - name: install epel
          yum:
            name: epel-release
          when: ansible_os_family | lower == 'redhat'

        - name: install ovirt guest agent
          package:
            name: qemu-guest-agent

        - name: start ovirt guest agent
          service:
            name: qemu-guest-agent
            state: started
            enabled: yes

        - name: group provisioned hosts
          group_by:
            key: "ovirt_{{ 'changed' if (ovirt_create.changed | bool) else 'noop' }}"

        - name: record provisioned hosts
          set_stats:
            data:
              dynamic_provisioning: "{{ groups['ovirt_changed'] | default([]) }}"
              aggregate: yes
          run_once: yes

      when: (vm_state | default(ovirt_state_default)) in ['present', 'running', 'recreate']
      become: yes

  handlers:

    - name: growpart
      command: growpart /dev/vda 1
      listen: resize disk
      become: yes

    - name: resize2fs
      command: resize2fs /dev/vda1
      listen: resize disk
      when: ansible_os_family | lower == 'debian'
      become: yes

    - name: xfs_growfs
      command: xfs_growfs /dev/vda1
      listen: resize disk
      when: ansible_os_family | lower == 'redhat'
      become: yes
