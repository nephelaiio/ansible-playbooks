---
- name: Deploy nginx ingress

  hosts: localhost

  vars:

    nginx_url: "nginx.{{ base_domain }}"
    nginx_release: 1.15.4
    nginx_containerport: 80
    nginx_app: nginx
    nginx_namespace: "{{ nginx_app }}"
    nginx_service_account: "{{ nginx_app }}"
    nginx_deployment: "{{ nginx_app }}"
    nginx_service: "{{ nginx_app }}-service"
    nginx_ingress: "{{ nginx_app }}-ingress"

  roles:

    - nephelaiio.plugins

  tasks:

    - name: include private variables
      include_vars:
        dir: "{{ variables }}"

    - name: create nginx namespace
      k8s:
        state: "{{ kube_state | default('present') }}"
        force: "{{ nginx_force | default(True) }}"
        definition: 
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ nginx_namespace }}"
            labels:
              name: "{{ nginx_namespace }}"

    - name: create nginx deployment
      k8s:
        state: "{{ kube_state | default('present') }}"
        namespace: "{{ nginx_namespace }}"
        force: "{{ nginx_force | default(True) }}"
        definition: 
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "{{ nginx_deployment }}"
            labels:
              app: "{{ nginx_app }}"
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: "{{ nginx_app }}"
            template:
              metadata:
                labels:
                  app: nginx
              spec:
                containers:
                - name: nginx
                  image: "nginx:{{ nginx_release }}"
                  ports:
                  - name: http
                    containerPort: "{{ nginx_containerport }}"

    - name: query existing nginx service object
      k8s_facts:
        namespace: "{{ nginx_namespace }}"
        kind: Service
        name: "{{ nginx_service }}"
      register:
        nginx_service_query

    - name: create nginx service
      k8s:
        state: "{{ kube_state | default('present') }}"
        namespace: "{{ nginx_namespace }}"
        force: "{{ nginx_force | default(True) }}"
        definition: 
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ nginx_service }}"
            labels:
              app: "{{ nginx_app }}"
          spec:
            ports:
            - name: http
              port: 80
              targetPort: "{{ nginx_containerport }}"
              protocol: TCP
            selector:
              app: nginx
      when: nginx_service_query.resources | length == 0

    - name: update nginx service
      k8s:
        state: "{{ kube_state | default('present') }}"
        namespace: "{{ nginx_namespace }}"
        force: "{{ nginx_force | default(True) }}"
        definition: 
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ nginx_service }}"
            resourceVersion: "{{ nginx_service_query.resources[0].metadata.resourceVersion }}"
            labels:
              app: "{{ nginx_app }}"
          spec:
            clusterIP: "{{ nginx_service_query.resources[0].spec.clusterIP }}"
            selector:
              app: "{{ nginx_app }}"
            ports:
            - name: http
              port: 80
              targetPort: "{{ nginx_containerport }}"
              protocol: TCP
      when: nginx_service_query.resources | length > 0

    - name: create nginx ingress
      k8s:
        state: "{{ kube_state | default('present') }}"
        namespace: "{{ nginx_namespace }}"
        force: "{{ nginx_force | default(True) }}"
        definition:
          kind: Ingress
          apiVersion: extensions/v1beta1
          metadata:
            name: "{{ nginx_ingress }}"
            annotations:
              kubernetes.io/ingress.class: traefik
              external-dns.alpha.kubernetes.io/target: "{{ k8s_lb_url }}"
          spec:
            rules:
            - host: "{{ nginx_url }}"
              http:
                paths:
                - path: /
                  backend:
                    serviceName: "{{ nginx_service }}"
                    servicePort: "{{ nginx_containerport }}"
