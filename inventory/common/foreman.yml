---
foreman_db_name: foreman
foreman_db_pass: !vault |
  $ANSIBLE_VAULT;1.1;AES256
  31303435643031656335653463613337383337363030393135343561613131303232326236373137
  6566646535396631316132326262646139616565326333340a623764373531326663323037353966
  63626365623331303463323737633030353237376533633537396661303762343131666663656238
  3339656630613863630a366366383935616131356436346333656136396264396437613734613366
  39343838333938396537663933383835623661643736616332633062383837616639
foreman_admin_user: admin
foreman_admin_pass: !vault |
  $ANSIBLE_VAULT;1.1;AES256
  30653062303830393833303933316162303435376238656532616361306464636338346538373133
  3362626134323163366366356366663535616566393833630a386335316436356139663235666362
  64633263636334323439663331393039303863333866313233613361316361383661386631643937
  3333313062313839380a656562343632663738326131313963316239643961313735616266366166
  36353064626139333133346164623839313861336538373739613662393563376337
foreman_api_user: "{{ foreman_admin_user }}"
foreman_api_pass: "{{ foreman_admin_pass }}"

foreman_organizations:
  nephelai:
    name: nephelai

foreman_locations:
  home:
    name: home
    organization: "{{ foreman_organizations.nephelai.name }}"

foreman_media: {}

foreman_os:
  bionic:
    name: Ubuntu
    architecture: x86_64
    major: 18.04
    release_name: bionic
    ptable: "Preseed default"
    provisioning_templates:
      - "Preseed default"
      - "Preseed default finish"
      - "Preseed default PXELinux"
    medium: Ubuntu mirror
    password_hash: SHA512
  centos7:
    name: CentOS
    architecture: x86_64
    major: 7
    ptable: "{{ foreman_ptables.kickstart_custom.name }}"
    provisioning_templates:
      - "{{ foreman_provisioning_templates.kickstart_custom.name }}"
      - "Kickstart default finish"
      - "Kickstart default PXELinux"
    medium: CentOS mirror
    password_hash: SHA512

foreman_hostgroups:
  bionic:
    name: Ubuntu Bionic
    architecture: x86_64
    operatingsystem: "{{ foreman_os.bionic.name }}"
    medium: "{{ foreman_os.bionic.medium }}"
    pxe_loader: PXELinux BIOS
    subnet: "{{ nets.management.network }}/{{ nets.management.netmask }}"
    domain: "{{ base_domain }}"
    root_pass: "{{ users.root.password  | password_hash(foreman_os.bionic.password_hash | lower) }}"
    foreman_organizations:
      - "{{ foreman_organizations.nephelai.name }}"
    foreman_locations:
      - "{{ foreman_locations.home.name }}"
    group_parameters_attributes:
      - name: remote_execution_ssh_user
        value: "{{ users.teddyphreak.username }}"
      - name: remote_execution_ssh_keys
        value: "{{ users.teddyphreak.pubkey }}"
      - name: remote_execution_create_user
        value: true
      - name: remote_execution_effective_user_method
        value: sudo
      - name: partitioning-vg-name
        value: ubuntu
  centos7:
    name: CentOS7
    architecture: x86_64
    operatingsystem: "{{ foreman_os.centos7.name }}"
    medium: "{{ foreman_os.centos7.medium }}"
    pxe_loader: PXELinux BIOS
    subnet: "{{ nets.management.network }}/{{ nets.management.netmask }}"
    domain: "{{ base_domain }}"
    root_pass: "{{ users.root.password  | password_hash(foreman_os.centos7.password_hash | lower) }}"
    ptable: "{{ foreman_ptables.kickstart_custom.name }}"
    foreman_organizations:
      - "{{ foreman_organizations.nephelai.name }}"
    foreman_locations:
      - "{{ foreman_locations.home.name }}"
    group_parameters_attributes:
      - name: selinux-mode
        value: disabled
      - name: disable-firewall
        value: true
      - name: enable-epel
        value: false
      - name: remote_execution_ssh_user
        value: "{{ users.teddyphreak.username }}"
      - name: remote_execution_ssh_keys
        value: "{{ users.teddyphreak.pubkey }}"
      - name: remote_execution_create_user
        value: true
      - name: remote_execution_effective_user_method
        value: sudo

foreman_domains: "{{ dns_zones.values() | list }}"

foreman_networks: "{{ nets.values() | list | selectattr('foreman_proxy', 'defined') | list }}"

foreman_ptables:
  kickstart_custom:
    name: Kickstart custom
    layout: |
      <%#
      kind: ptable
      name: Kickstart custom
      model: Ptable
      oses:
      - CentOS
      - Fedora
      - RedHat
      %>
      <%
        partitioning_disk = host_param('install-disk') ? '--drives=' + host_param('install-disk') : ''
      -%>
      zerombr
      clearpart <%= partitioning_disk %> --initlabel --all
      autopart
    os_family: Redhat

foreman_provisioning_templates:
  kickstart_custom:
    name: Kicstart custom
    kind: provision
    foreman_organizations:
      - "{{ foreman_organizations.nephelai.name }}"
    foreman_locations:
      - "{{ foreman_locations.home.name }}"
    template: |
      <%#
      kind: provision
      name: Kickstart default
      model: ProvisioningTemplate
      oses:
      - CentOS
      - Fedora
      - RedHat
      %>
      <%#
      This template accepts the following parameters:
      - lang: string (default="en_US.UTF-8")
      - selinux-mode: string (default="enforcing")
      - keyboard: string (default="us")
      - time-zone: string (default="UTC")
      - http-proxy: string (default="")
      - http-proxy-port: string (default="")
      - force-puppet: boolean (default=false)
      - enable-epel: boolean (default=true)
      - enable-puppetlabs-repo: boolean (default=false)
      - enable-puppetlabs-pc1-repo: boolean (default=false)
      - enable-puppetlabs-puppet5-repo: boolean (default=false)
      - salt_master: string (default=undef)
      - ntp-server: string (default="0.fedora.pool.ntp.org")
      - bootloader-append: string (default="nofb quiet splash=quiet")
      - disable-firewall: boolean (default=false)
      - package_upgrade: boolean (default=true)
      - disable-uek: boolean (default=false)
      - use-ntp: boolean (default depends on OS release)
      - boot-drive: (default="")
      %>
      <%
        rhel_compatible = @host.operatingsystem.family == 'Redhat' && @host.operatingsystem.name != 'Fedora'
        is_fedora = @host.operatingsystem.name == 'Fedora'
        os_major = @host.operatingsystem.major.to_i
        os_minor = @host.operatingsystem.minor.to_i
        realm_compatible = (@host.operatingsystem.name == 'Fedora' && os_major >= 20) || (rhel_compatible && os_major >= 7)
        # safemode renderer does not support unary negation
        pm_set = @host.puppetmaster.empty? ? false : true
        proxy_uri = host_param('http-proxy') ? "http://#{host_param('http-proxy')}:#{host_param('http-proxy-port')}" : nil
        proxy_string = proxy_uri ? " --proxy=#{proxy_uri}" : ''
        puppet_enabled = pm_set || host_param_true?('force-puppet')
        salt_enabled = host_param('salt_master') ? true : false
        chef_enabled = @host.respond_to?(:chef_proxy) && @host.chef_proxy
        section_end = (rhel_compatible && os_major <= 5) ? '' : '%end'
        use_ntp = host_param_true?('use-ntp') || (is_fedora && os_major < 16) || (rhel_compatible && os_major <= 7)
        boot_drive_string = host_param('boot-drive') ? "--boot-drive=" + host_param('boot-drive') : ''
        boot_order_string = host_param('boot-order') ? "--driveorder=" + host_param('boot-order') : ''
      %>
      <% if (is_fedora && os_major < 29) || (rhel_compatible && os_major <= 7) -%>
      install
      <% end -%>
      <%
      if host_param('kickstart_liveimg')
        img_name = host_param('kickstart_liveimg')
        liveimg_url = if host_param('kt_activation_keys')
          repository_url(img_name, 'isos')
        else
          if img_name.match(%r|^([\w\-\+]+)://|)
            img_name
          else
            "#{@host.operatingsystem.medium_uri(@host)}/#{img_name}"
          end
        end
      %>
      liveimg --url=<%= liveimg_url %> <%= proxy_string %>
      <% else %>
      <%= @mediapath %><%= proxy_string %>
      <% @additional_media.each do |medium| -%>
      repo --name <%= medium[:name] %> --baseurl <%= medium[:url] %> <%= medium[:install] ? ' --install' : '' %><%= proxy_string %>
      <% end -%>
      <% end %>
      lang <%= host_param('lang') || 'en_US.UTF-8' %>
      selinux --<%= host_param('selinux-mode') || host_param('selinux') || 'enforcing' %>
      keyboard <%= host_param('keyboard') || 'us' %>
      skipx

      <% subnet = @host.subnet -%>
      <% if subnet.respond_to?(:dhcp_boot_mode?) -%>
      <% dhcp = subnet.dhcp_boot_mode? && !@static -%>
      <% else -%>
      <% dhcp = !@static -%>
      <% end -%>

      network --bootproto <%= dhcp ? 'dhcp' : "static --ip=#{@host.ip} --netmask=#{subnet.mask} --gateway=#{subnet.gateway} --nameserver=#{[subnet.dns_primary, subnet.dns_secondary].select{ |item| item.present? }.join(',')} --mtu=#{subnet.mtu.to_s}" %> --hostname <%= @host %><%= os_major >= 6 ? " --device=#{@host.mac}" : '' -%>

      rootpw --iscrypted <%= root_pass %>
      <% if host_param_true?('disable-firewall') -%>
      firewall --disable
      <% else -%>
      firewall --<%= os_major >= 6 ? 'service=' : '' %>ssh
      <% end -%>
      <% if (is_fedora && os_major >= 28) || (rhel_compatible && os_major > 7) -%>
      authselect --useshadow --passalgo=<%= @host.operatingsystem.password_hash.downcase || 'sha256' %> --kickstart
      <% else -%>
      authconfig --useshadow --passalgo=<%= @host.operatingsystem.password_hash.downcase || 'sha256' %> --kickstart
      <% end -%>
      <% if use_ntp -%>
      timezone --utc <%= host_param('time-zone') || 'UTC' %>
      <% else -%>
      timezone --utc <%= host_param('time-zone') || 'UTC' %> <%= host_param('ntp-server') ? "--ntpservers #{host_param('ntp-server')}" : '' %>
      <% end -%>

      <% if rhel_compatible -%>
      services --disabled gpm,sendmail,cups,pcmcia,isdn,rawdevices,hpoj,bluetooth,openibd,avahi-daemon,avahi-dnsconfd,hidd,hplip,pcscd
      <% end -%>

      <% if realm_compatible && host_enc['parameters']['realm'] && @host.realm && @host.realm.realm_type == 'Active Directory' -%>
      # One-time password will be requested at install time. Otherwise, $HOST[OTP] is used as a placeholder value.
      realm join --one-time-password='<%= @host.otp || "$HOST[OTP]" %>' <%= @host.realm %>
      <% end -%>

      <% if @host.operatingsystem.name == 'Fedora' -%>
      repo --name=fedora-everything --mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=fedora-<%= @host.operatingsystem.major %>&arch=<%= @host.architecture %><%= proxy_string %>
      <% end -%>

      <% if @host.operatingsystem.name == 'OracleLinux' && os_major == 7 && os_minor < 5 -%>
      repo --name="Server-Mysql"
      <% end -%>

      <% if @host.operatingsystem.name == 'Fedora' && os_major <= 16 -%>
      # Bootloader exception for Fedora 16:
      bootloader --append="<%= host_param('bootloader-append') || 'nofb quiet splash=quiet' %> <%= ks_console %>" <%= @grub_pass %>
      part biosboot --fstype=biosboot --size=1
      <% else -%>
      bootloader --location=mbr <%= boot_drive_string %> <%= boot_order_string %> --append="<%= host_param('bootloader-append') || 'nofb quiet splash=quiet' %>" <%= @grub_pass %>
      <% if os_major == 5 -%>
      key --skip
      <% end -%>
      <% end -%>

      <% if @dynamic -%>
      %include /tmp/diskpart.cfg
      <% else -%>
      <%= @host.diskLayout %>
      <% end -%>

      text
      <% if @host.respond_to?(:bootdisk_build?) && @host.bootdisk_build? %>
      reboot --eject
      <% else -%>
      reboot
      <% end -%>

      %packages
      yum
      dhclient
      <% if use_ntp -%>
      ntp
      <% else -%>
      chrony
      <% end -%>
      wget
      @Core
      <% if os_major >= 6 -%>
      redhat-lsb-core
      <% end -%>

      <% if salt_enabled %>
      salt-minion
      <% end -%>
      <%= section_end -%>

      <% if @dynamic -%>
      %pre
      <%= @host.diskLayout %>
      <%= section_end -%>
      <% end -%>

      %post --nochroot
      exec < /dev/tty3 > /dev/tty3
      #changing to VT 3 so that we can see whats going on....
      /usr/bin/chvt 3
      (
      cp -va /etc/resolv.conf /mnt/sysimage/etc/resolv.conf
      /usr/bin/chvt 1
      ) 2>&1 | tee /mnt/sysimage/root/install.postnochroot.log
      <%= section_end -%>

      %post
      logger "Starting anaconda <%= @host %> postinstall"
      exec < /dev/tty3 > /dev/tty3
      #changing to VT 3 so that we can see whats going on....
      /usr/bin/chvt 3
      (
      <% if subnet.respond_to?(:dhcp_boot_mode?) || @host.subnet6.respond_to?(:dhcp_boot_mode?) -%>
      <%= snippet 'kickstart_networking_setup' %>
      <% end -%>

      echo "Updating system time"
      <% if use_ntp -%>
      /usr/sbin/ntpdate -sub <%= host_param('ntp-server') || '0.fedora.pool.ntp.org' %>
      <% else -%>
      /usr/bin/chronyc makestep
      <% end -%>
      /usr/sbin/hwclock --systohc

      <% if proxy_uri -%>
      # Yum proxy
      echo 'proxy = <%= proxy_uri %>' >> /etc/yum.conf
      <% end -%>

      <% if rhel_compatible && !host_param_false?('enable-epel') -%>
      <%= snippet 'epel' -%>
      <% end -%>

      <%= snippet 'redhat_register' %>

      <% if host_enc['parameters']['realm'] && @host.realm && (@host.realm.realm_type == 'FreeIPA' || @host.realm.realm_type == 'Red Hat Identity Management') -%>
      <%= snippet 'freeipa_register' %>
      <% end -%>

      <% unless host_param_false?('package_upgrade') -%>
      # update all the base packages from the updates repository
      if [ -f /usr/bin/dnf ]; then
        dnf -y update
      else
        yum -t -y update
      fi
      <% end -%>

      <%= snippet('remote_execution_ssh_keys') %>

      <%= snippet "blacklist_kernel_modules" %>

      <% if chef_enabled %>
      <%= snippet 'chef_client' %>
      <% end -%>

      <% if puppet_enabled %>
      <% if host_param_true?('enable-puppetlabs-pc1-repo') || host_param_true?('enable-puppetlabs-repo') || host_param_true?('enable-puppetlabs-puppet5-repo') -%>
      <%= snippet 'puppetlabs_repo' %>
      <% end -%>
      <%= snippet 'puppet_setup' %>
      <% end -%>

      <% if salt_enabled %>
      <%= snippet 'saltstack_setup' %>
      <% end -%>

      <% if @host.operatingsystem.name == 'OracleLinux' && host_param_true?('disable-uek') -%>
      # Uninstall the Oracle Unbreakable Kernel packages
      yum -t -y remove kernel-uek*
      sed -e 's/DEFAULTKERNEL=kernel-uek/DEFAULTKERNEL=kernel/g' -i /etc/sysconfig/kernel
      <% end -%>

      <%= snippet('ansible_provisioning_callback') %>

      sync

      echo "Informing Foreman that we are built"
      <%= snippet 'built' %>
      ) 2>&1 | tee /root/install.post.log
      exit 0

      <%= section_end -%>
