---
- name: Install reverse proxy

  hosts: awx

  become: yes

  vars:

    awx_backend_proto: http
    letsencrypt_basedir: /etc/letsencrypt
    letsencrypt_certdir: "{{ letsencrypt_basedir }}/live"
    letsencrypt_keydir: "{{ letsencrypt_basedir }}/keys"
    letsencrypt_account_keyfile: "{{ letsencrypt_keydir }}/id_rsa.letsencrypt"
    letsencrypt_domain: "{{ awx_hostname }}"
    letsencrypt_zone: "{{ awx_hostname | split_with('.') | tail | join('.') }}"
    letsencrypt_domain_keyfile: "{{ letsencrypt_keydir }}/id_rsa.{{ letsencrypt_domain }}"
    letsencrypt_domain_csrfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.csr"
    letsencrypt_domain_crtfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.crt"
    letsencrypt_domain_chainfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.chain.crt"
    nginx:
      vhosts:
        awx_https:
          listen: "443 ssl"
          server_name: "{{ awx_hostname }}"
          filename: "{{ awx_hostname }}.https.conf"
          access_log: "/var/log/nginx/{{ awx_hostname }}.access.log"
          error_log: "/var/log/nginx/{{ awx_hostname }}.error.log"
          extra_parameters: |
            keepalive_timeout   300;
            ssl_certificate {{ letsencrypt_domain_chainfile }};
            ssl_certificate_key {{ letsencrypt_domain_keyfile }};
            ssl_session_cache   shared:SSL:10m;
            ssl_session_timeout 10m;
            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
            ssl_prefer_server_ciphers on;
            ssl_stapling on;
            ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA;
            add_header Strict-Transport-Security max-age=31536000;
            add_header X-Frame-Options DENY;
            proxy_cache off;
            proxy_store off;
            location / {
              proxy_pass {{ awx_backend_proto }}://127.0.0.1:{{ awx_port }}/;
              proxy_http_version 1.1;
              proxy_set_header   Host               $host;
              proxy_set_header   X-Real-IP          $remote_addr;
              proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
              proxy_set_header   X-Forwarded-Proto  $scheme;
              proxy_set_header   Upgrade            $http_upgrade;
              proxy_set_header   Connection         "upgrade";
            }

  roles:

    - nephelaiio.plugins

  tasks:

    - name: include private variables
      include_vars:
        dir: "{{ variables }}"

    - name: install package requirements
      package:
        name:
          - python-pip
          - acl
        state: latest

    - name: create letsencrypt folders
      file:
        path: "{{ item }}"
        mode: 0755
        state: directory
      with_items:
        - "{{ letsencrypt_certdir }}"
        - "{{ letsencrypt_keydir }}"

    - name: create key
      shell: 'ssh-keygen -t rsa -b 2048 -C "{{ letsencrypt_email }}" -f {{ letsencrypt_account_keyfile }} -q -N ""'
      args:
        creates: "{{ letsencrypt_account_keyfile }}"

    - name: create domain key
      shell: 'ssh-keygen -t rsa -b 2048 -C "{{ letsencrypt_email }}" -f {{ letsencrypt_domain_keyfile }} -q -N ""'
      args:
        creates: "{{ letsencrypt_domain_keyfile }}"

    - name: create csr
      shell: 'openssl req -new -nodes -key {{ letsencrypt_domain_keyfile }} -out {{ letsencrypt_domain_csrfile }} -subj "/CN={{ letsencrypt_domain }}"'
      changed_when: false

    - name: create challenge
      letsencrypt:
        account_key: "{{ letsencrypt_account_keyfile }}"
        challenge: dns-01
        csr: "{{ letsencrypt_domain_csrfile }}"
        dest: "{{ letsencrypt_domain_crtfile }}"
        fullchain_dest: "{{ letsencrypt_domain_chainfile }}"
        terms_agreed: yes
        acme_directory: https://acme-v01.api.letsencrypt.org/directory
      register: letsencrypt_challenge

    - name: install pip
      include_role:
        name: nephelaiio.pip

    - name: install route53 dependencies
      pip:
        name: boto

    - name: create route53 txt record for certificate validation
      route53:
        command: create
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        zone: "{{ letsencrypt_zone }}"
        record: "{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]['dns-01']['resource'] }}.{{ letsencrypt_domain }}"
        retry_interval: 300
        type: TXT
        ttl: 7200
        value: '"{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]["dns-01"]["resource_value"] }}"'
        wait: yes
        overwrite: yes
      when: "'challenge_data' in letsencrypt_challenge"
      ignore_errors: yes

    - name: wait for txt record propagation
      pause:
        seconds: 60
      when: "'challenge_data' in letsencrypt_challenge"

    - name: validate challenge
      letsencrypt:
        account_key: "{{ letsencrypt_account_keyfile }}"
        challenge: dns-01
        csr: "{{ letsencrypt_domain_csrfile }}"
        dest: "{{ letsencrypt_domain_crtfile }}"
        fullchain_dest: "{{ letsencrypt_domain_chainfile }}"
        data: "{{ letsencrypt_challenge }}"
        terms_agreed: yes
        acme_directory: https://acme-v01.api.letsencrypt.org/directory
      when: "'challenge_data' in letsencrypt_challenge"

    - name: delete route53 txt record for certificate validation
      route53:
        command: delete
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        zone: "{{ letsencrypt_zone }}"
        record: "{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]['dns-01']['resource'] }}.{{ letsencrypt_zone }}"
        retry_interval: 300
        type: TXT
        ttl: 7200
        value: '"{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]["dns-01"]["resource_value"] }}"'
        wait: yes
      when: "'challenge_data' in letsencrypt_challenge"
      ignore_errors: yes

    - name: install nginx
      include_role:
        name: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: true
        nginx_vhosts:
          - "{{ nginx.vhosts.awx_https }}"


- name: Install awx

  hosts: awx

  become: yes

  vars:

    awx_version: 1.0.5
    awx_cli_conf: /root/.tower_cli.cfg
    awx_pg_hostname: "{{ ansible_host }}"
    awx_pg_db: "awx_{{ awx_version | regex_replace('\\.', '') }}"
    awx_pg_port: 5432
    awx_settings:
      REMOTE_HOST_HEADERS: "[u'REMOTE_ADDR', u'REMOTE_HOST', u'HTTP_X_FORWARDED_FOR']"
      PROXY_IP_WHITELIST: "[u'127.0.0.1', u'{{ ansible_hostname }}']"

  roles:

    - nephelaiio.plugins

  tasks:

    - name: include private variables
      include_vars:
        dir: "{{ variables }}"

    - name: install postgresql
      include_role:
        name: geerlingguy.postgresql
      vars:
        postgresql_global_config_options:
          - option: listen_addresses
            value: "*"
        postgresql_databases:
          - name: "{{ awx_pg_db }}"
            port: "{{ awx_pg_port }}"
        postgresql_users:
          - name: "{{ awx_pg_user }}"
            password: "{{ awx_pg_pass }}"
            db: "{{ awx_pg_db }}"
        postgresql_hba_entries:
          - { type: local, database: all, user: postgres, auth_method: peer }
          - { type: local, database: all, user: all, auth_method: peer }
          - { type: host, database: all, user: all, address: '127.0.0.1/32', auth_method: md5 }
          - { type: host, database: all, user: all, address: "{{ awx_pg_hostname }}/32", auth_method: md5 }
          - { type: host, database: "{{ awx_pg_db }}", user: "{{ awx_pg_user }}", address: "0.0.0.0/0", auth_method: md5 }

    - name: manage pgpass configuration file
      copy:
        dest: /root/.pgpass
        mode: 0600
        content: "{{ awx_pg_hostname }}:{{ awx_pg_port }}:{{ awx_pg_db }}:{{ awx_pg_user }}:{{ awx_pg_pass }}\n"

    - name: install docker
      include_role:
        name: nephelaiio.docker
      vars:
        pip_packages: pip
        pip_packages_helpers:
          - python-setuptools
          - ca-certificates

    - name: define awx installer variables
      set_fact:
        dockerhub_base: ansible
        dockerhub_version: "{{ awx_version }}"
        default_admin_user: "{{ awx_admin_user }}"
        default_admin_password: "{{ awx_admin_pass }}"
        awx_secret_key: "{{ awx_secret_pass }}"
        host_port: "{{ awx_port }}"
        pg_hostname: "{{ awx_pg_hostname }}"
        pg_username: "{{ awx_pg_user }}"
        pg_password: "{{ awx_pg_pass }}"
        pg_database: "{{ awx_pg_db }}"
        pg_port: "{{ awx_pg_port }}"
        awx_container_search_domains: "{{ dns.search_domains | join(',') }}"

    - name: check awx installer variables
      include_tasks: awx/check_vars.yml

    - name: install local docker awx images
      include_tasks: awx/local_docker.yml

    - name: install tower cli
      pip:
        name: ansible-tower-cli
        state: latest

    - name: create tower cli configuration file
      template:
        src: awx/tower_cli.cfg.j2
        dest: "{{ awx_cli_conf }}"
        mode: 640
      vars:
        host: "{{ awx_url | urlsplit('hostname') }}"
        username: "{{ awx_admin_user }}"
        password: "{{ awx_admin_pass }}"
        verify_ssl: false
        verbose: false

    - name: wait for awx startup
      uri:
        url: "{{ awx_url }}"
        status_code: 200
      register: awx_up
      until: awx_up.status == 200
      retries: 10
      delay: 60

    - name: manage awx settings
      command: "awx-cli setting modify {{ item.key }} \"{{ item.value }}\""
      with_dict: "{{ awx_settings }}"
      no_log: "{{ awx_nolog }}"

    - name: destroy awx job schedules
      include_tasks: awx/schedule_destroy.yml
      vars:
        schedule: "{{ item.1 }}"
      with_subelements:
        - "{{ awx_organizations | selectattr('schedules', 'defined') | list }}"
        - schedules
      when: item.0.state | default('present') == 'absent' or item.1.state | default('present') == 'absent'
      no_log: "{{ awx_nolog }}"

    - name: destroy awx job templates
      include_tasks: awx/template_destroy.yml
      vars:
        template: "{{ item.1 }}"
      with_subelements:
        - "{{ awx_organizations | selectattr('templates', 'defined') | list }}"
        - templates
      when: item.0.state | default('present') == 'absent' or item.1.state | default('present') == 'absent'
      no_log: "{{ awx_nolog }}"

    - name: destroy awx inventories
      include_tasks: awx/inventory_destroy.yml
      vars:
        inventory: "{{ item.1 }}"
      with_subelements:
        - "{{ awx_organizations | selectattr('inventories', 'defined') | list }}"
        - inventories
      when: item.0.state | default('present') == 'absent' or item.1.state | default('present') == 'absent'
      no_log: "{{ awx_nolog }}"

    - name: destroy awx projects
      include_tasks: awx/project_destroy.yml
      vars:
        project: "{{ item.1 }}"
      with_subelements:
        - "{{ awx_organizations | selectattr('projects', 'defined') | list }}"
        - projects
      when: item.0.state | default('present') == 'absent' or item.1.state | default('present') == 'absent'
      no_log: "{{ awx_nolog }}"

    - name: destroy awx credentials
      include_tasks: awx/credential_destroy.yml
      vars:
        credential: "{{ item.1 }}"
      with_subelements:
        - "{{ awx_organizations | selectattr('credentials', 'defined') | list }}"
        - credentials
      when: item.0.state | default('present') == 'absent' or item.1.state | default('present') == 'absent'
      no_log: "{{ awx_nolog }}"

    - name: destroy awx organizations
      command: "awx-cli organization delete -n {{ organization.name | quote }}"
      vars:
        organization: "{{ item }}"
      with_items: "{{ awx_organizations }}"
      when: item.state | default('present') == 'absent'
      no_log: "{{ awx_nolog }}"

    - name: create awx organizations
      command: "awx-cli organization create -n {{ name | string | quote }}"
      vars:
        name: "{{ item.name }}"
      with_items: "{{ awx_organizations }}"
      when: item.state | default('present') == 'present'
      no_log: "{{ awx_nolog }}"

    - name: create awx credentials
      include_tasks: awx/credential_create.yml
      vars:
        organization: "{{ item.0.name }}"
        credential: "{{ item.1 }}"
      with_subelements:
        - "{{ awx_organizations | selectattr('credentials', 'defined') | list }}"
        - credentials
      when: item.0.state == 'present' and item.1.state == 'present'
      no_log: "{{ awx_nolog }}"

    - name: create awx projects
      include_tasks: awx/project_create.yml
      vars:
        organization: "{{ item.0.name }}"
        project: "{{ item.1 }}"
      with_subelements:
        - "{{ awx_organizations | selectattr('projects', 'defined') | list }}"
        - projects
      when: item.0.state | default('present') == 'present' and item.1.state | default('present') == 'present'
      no_log: "{{ awx_nolog }}"

    - name: create awx inventories
      include_tasks: awx/inventory_create.yml
      vars:
        organization: "{{ item.0.name }}"
        inventory: "{{ item.1 }}"
      with_subelements:
        - "{{ awx_organizations | selectattr('inventories', 'defined') | list }}"
        - inventories
      when: item.0.state | default('present') == 'present' and item.1.state | default('present') == 'present'
      no_log: "{{ awx_nolog }}"

    - name: create awx job templates
      include_tasks: awx/template_create.yml
      vars:
        template: "{{ item.1 }}"
      with_subelements:
        - "{{ awx_organizations | selectattr('templates', 'defined') | list }}"
        - templates
      when: item.0.state | default('present') == 'present' and item.1.state | default('present') == 'present'
      no_log: "{{ awx_nolog }}"

    - name: create awx job schedules
      include_tasks: awx/schedule_create.yml
      vars:
        schedule: "{{ item.1 }}"
      with_subelements:
        - "{{ awx_organizations | selectattr('schedules', 'defined') | list }}"
        - schedules
      when: item.0.state | default('present') == 'present' and item.1.state | default('present') == 'present'
      no_log: "{{ awx_nolog }}"

    - name: install pip requirements
      pip:
        name: dnspython
        state: latest
      delegate_to: "{{ groups['pdns'] | first }}"

    - name: create awx dns record
      nsupdate:
        server: "{{ servers.dns | first }}"
        zone: "{{ base_domain }}"
        record: "{{ awx_hostname | split_with('.') | first }}"
        type: A
        value: "{{ ansible_default_ipv4.address }}"
      delegate_to: "{{ groups['pdns'] | first }}"
