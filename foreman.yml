---
- name: Install Foreman

  hosts: foreman

  become: yes

  roles:

    - nephelaiio.plugins

  vars:

    nginx_user: www-data
    foreman_db_host: 127.0.0.1
    foreman_url: "https://foreman.{{ base_domain }}"
    foreman_hostname: "{{ foreman_url | urlsplit('hostname') }}"
    foreman_user: foreman
    foreman_group: foreman
    letsencrypt_domain: "{{ foreman_hostname }}"
    letsencrypt_basedir: /etc/letsencrypt
    letsencrypt_certdir: "{{ letsencrypt_basedir }}/live"
    letsencrypt_keydir: "{{ letsencrypt_basedir }}/keys"
    letsencrypt_account_keyfile: "{{ letsencrypt_keydir }}/id_rsa.letsencrypt"
    letsencrypt_zone: "{{ letsencrypt_domain | split_with('.') | tail | join('.') }}"
    letsencrypt_domain_keyfile: "{{ letsencrypt_keydir }}/id_rsa.{{ letsencrypt_domain }}"
    letsencrypt_domain_csrfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.csr"
    letsencrypt_domain_crtfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.crt"
    letsencrypt_domain_chainfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.chain.crt"

  tasks:

    - name: include private variables
      include_vars:
        dir: "{{ variables }}"

    - name: install foreman apt key
      apt_key:
        url: https://deb.theforeman.org/pubkey.gpg
        id: 6F8600B9563278F6

    - name: install foreman apt repository
      apt_repository:
        repo: deb http://deb.theforeman.org/ bionic 1.20
        state: present
        update_cache: yes

    - name: install foreman packages
      package:
        name:
          - foreman
          - foreman-cli
          - foreman-ec2
          - foreman-console
          - foreman-mysql2
          - ruby-hammer-cli
          - ruby-hammer-cli-foreman

    - name: install mysql
      include_role:
        name: geerlingguy.mysql
      vars:
        mysql_databases:
          - name: "{{ foreman_db_name }}"
        mysql_users:
          - name: "{{ foreman_db_user }}"
            password: "{{ foreman_db_pass }}"
            priv: "{{ foreman_db_name }}.*:ALL"
        mysql_bind_address: "{{ foreman_db_host }}"

    - name: configure database
      copy:
        dest: /etc/foreman/database.yml
        content: "{{ database_yaml | to_nice_yaml(indent=2) }}"
        mode: 0640
        owner: "{{ foreman_user }}"
        group: "{{ foreman_group }}"
      vars:
        database_yaml:
          production:
            adapter: mysql2
            database: "{{ foreman_db_name }}"
            username: "{{ foreman_db_user }}"
            password: "{{ foreman_db_pass }}"
            host: "{{ foreman_db_host }}"
      notify: rake

    - name: install nginx / passenger
      include_role:
        name: geerlingguy.passenger
      vars:
        passenger_server_name: "{{ foreman_hostname }}"
        passenger_app_env: production
        passenger_app_root: /usr/share/foreman/public

    - name: add nginx user to foreman group
      user:
        name: "{{ nginx_user }}"
        group: "{{ foreman_group }}"
        append: yes
      notify: restart nginx

    - name: update foreman pdns record
      uri:
        url: "{{ pdns_url }}/api/v1/servers/localhost/zones/{{ foreman_url_zone }}"
        method: PATCH
        return_content: yes
        body_format: json
        body:
          rrsets:
            - name: "{{ foreman_url_host }}"
              type: A
              ttl: 3600
              changetype: REPLACE
              records:
                - content: "{{ ansible_default_ipv4.address }}"
                  disabled: no
                  set-ptr: no
                  comments: []
        headers:
          X-API-Key: "{{ pdns_api_key }}"
        status_code: 204
      vars:
        foreman_url_host: "{{ foreman_hostname }}."
        foreman_url_zone: "{{ foreman_url_host | split_with('.') | tail | join('.') }}"

    - name: create letsencrypt folders
      file:
        path: "{{ item }}"
        mode: 0755
        state: directory
      with_items:
        - "{{ letsencrypt_certdir }}"
        - "{{ letsencrypt_keydir }}"

    - name: create key
      shell: 'ssh-keygen -t rsa -b 2048 -C "{{ letsencrypt_email }}" -f {{ letsencrypt_account_keyfile }} -q -N ""'
      args:
        creates: "{{ letsencrypt_account_keyfile }}"

    - name: create domain key
      shell: 'ssh-keygen -t rsa -b 2048 -C "{{ letsencrypt_email }}" -f {{ letsencrypt_domain_keyfile }} -q -N ""'
      args:
        creates: "{{ letsencrypt_domain_keyfile }}"

    - name: create csr
      shell: 'openssl req -new -nodes -key {{ letsencrypt_domain_keyfile }} -out {{ letsencrypt_domain_csrfile }} -subj "/CN={{ letsencrypt_domain }}"'
      changed_when: false

    - name: create challenge
      acme_certificate:
        account_key: "{{ letsencrypt_account_keyfile }}"
        challenge: dns-01
        csr: "{{ letsencrypt_domain_csrfile }}"
        dest: "{{ letsencrypt_domain_crtfile }}"
        fullchain_dest: "{{ letsencrypt_domain_chainfile }}"
        terms_agreed: yes
        acme_directory: https://acme-v01.api.letsencrypt.org/directory
      register: letsencrypt_challenge

    - name: install pip
      package:
        name: python-pip

    - name: install route53 dependencies
      pip:
        name: boto

    - name: create route53 txt record for certificate validation
      route53:
        command: create
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        zone: "{{ letsencrypt_zone }}"
        record: "{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]['dns-01']['resource'] }}.{{ letsencrypt_domain }}"
        retry_interval: 300
        type: TXT
        ttl: 7200
        value: '"{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]["dns-01"]["resource_value"] }}"'
        wait: yes
        overwrite: yes
      when: "'challenge_data' in letsencrypt_challenge"
      ignore_errors: yes

    - name: wait for txt record propagation
      pause:
        seconds: 60
      when: "'challenge_data' in letsencrypt_challenge"

    - name: validate challenge
      acme_certificate:
        account_key: "{{ letsencrypt_account_keyfile }}"
        challenge: dns-01
        csr: "{{ letsencrypt_domain_csrfile }}"
        dest: "{{ letsencrypt_domain_crtfile }}"
        fullchain_dest: "{{ letsencrypt_domain_chainfile }}"
        data: "{{ letsencrypt_challenge }}"
        terms_agreed: yes
        acme_directory: https://acme-v01.api.letsencrypt.org/directory
      when: "'challenge_data' in letsencrypt_challenge"

    - name: delete route53 txt record for certificate validation
      route53:
        command: delete
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        zone: "{{ letsencrypt_zone }}"
        record: "{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]['dns-01']['resource'] }}.{{ letsencrypt_zone }}"
        retry_interval: 300
        type: TXT
        ttl: 7200
        value: '"{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]["dns-01"]["resource_value"] }}"'
        wait: yes
      when: "'challenge_data' in letsencrypt_challenge"
      ignore_errors: yes

    - name: create nginx vhost file
      copy:
        dest: "/etc/nginx/sites-enabled/{{ letsencrypt_domain }}.https.conf"
        content: |
          server {
            listen  443 ssl;
            server_name {{ letsencrypt_domain }};

            access_log /var/log/nginx/{{ letsencrypt_domain }}.access.log;
            error_log /var/log/nginx/{{ letsencrypt_domain }}.error.log;

            keepalive_timeout   300;
            ssl_certificate {{ letsencrypt_domain_chainfile }};
            ssl_certificate_key {{ letsencrypt_domain_keyfile }};
            ssl_session_cache   shared:SSL:10m;
            ssl_session_timeout 10m;
            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
            ssl_prefer_server_ciphers on;
            ssl_stapling on;
            ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA;
            charset utf-8;
            gzip on;
            gzip_types text/css application/javascript text/javascript application/x-javascript image/svg+xml text/plain text/xsd text/xsl text/xml image/x-icon;

            location / {
              proxy_pass http://{{ letsencrypt_domain }}/;
              proxy_http_version 1.1;
              proxy_set_header   Host               $host;
              proxy_set_header   X-Real-IP          $remote_addr;
              proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
              proxy_set_header   X-Forwarded-Proto  $scheme;
              proxy_set_header   Upgrade            $http_upgrade;
              proxy_set_header   Connection         "upgrade";
            }
          }
      notify: restart nginx

  handlers:

    - name: restart nginx
      service:
        name: nginx
        state: restarted

    - name: rake migrate
      command: foreman-rake db:migrate
      listen: rake

    - name: rake seed
      command: foreman-rake db:seed
      listen: rake
