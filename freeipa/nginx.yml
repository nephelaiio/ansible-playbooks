---
- name: Install freeipa nginx proxy

  hosts: ipaproxy

  become: yes

  vars:

    acme_certificate_domain: "{{ freeipa_url | urlsplit('hostname') }}"
    acme_certificate_chainfile: "/etc/nginx/{{ acme_certificate_domain }}.chain.crt"
    acme_certificate_keyfile: "/etc/nginx/{{ acme_certificate_domain }}.key"
    acme_certificate_add_ca: yes
    acme_certificate_aws_accesskey_id: "{{ aws_access_key_id | default(lookup('env', 'AWS_ACCESS_KEY_ID')) }}"
    acme_certificate_aws_accesskey_secret: "{{ aws_secret_access_key | default(lookup('env', 'AWS_SECRET_ACCESS_KEY')) }}"

    nginx_install_from: os_repository
    nginx_cleanup_config_path:
      - /etc/nginx/conf.d
      - /etc/nginx/sites-enabled/default
      - /etc/nginx/sites-available/default
    nginx_main_template:
      conf_file_name: nginx.conf
      conf_file_location: /etc/nginx/
      user: www-data
      worker_processes: auto
      error_level: warn
      worker_connections: 1024
      http_enable: true
      http_settings:
        keepalive_timeout: 60
        cache: false
        rate_limit: false
        keyval: false
      stream_enable: false
      http_global_autoindex: false
      server_tokens: off
    nginx_http_template:
      default:
        listen:
          listen_default:
            ip: '*'
            port: 80
        port: 80
        server_name: "{{ acme_certificate_domain }}"
        conf_file_name: "{{ acme_certificate_domain }}.http.conf"
        https_redirect: yes
      freeipa:
        listen:
          listen_default:
            ip: '*'
            port: 443
        server_name: "{{ acme_certificate_domain }}"
        conf_file_name: "{{ acme_certificate_domain }}.https.conf"
        ssl:
          key: "{{ acme_certificate_keyfile }}"
          cert: "{{ acme_certificate_chainfile }}"
          protocols: TLSv1.2 TLSv1.3
          ciphers: HIGH:!aNULL:!MD5
        reverse_proxy:
          locations:
            default:
              location: /
              proxy_pass: http://freeipa
              proxy_set_header:
                header_host:
                  name: Host
                  value: $host
                header_upgrade:
                  name: Upgrade
                  value: $http_upgrade
                header_connection:
                  name: Connection
                  value: Upgrade
                header_x_forwarded_for:
                  name: X-Forwarded-For
                  value: $proxy_add_x_forwarded_for
        upstreams:
          freeipa:
            name: freeipa
            lb_method: least_conn
            zone_name: freeipa
            zone_size: 32k
            sticky_cookie: false
            servers: "{{ freeipa_servers }}"

  roles:

    - nephelaiio.plugins

  tasks:

    - name: gather facts from upstream servers
      setup:
      delegate_to: "{{ item }}"
      delegate_facts: yes
      loop: "{{ groups['freeipa'] | list }}"

    - name: build list of upstream servers
      set_fact:
        freeipa_servers: "{{ (freeipa_servers | default({})) | combine ({ item: freeipa_item_server}) }}"
      loop: "{{ groups['freeipa'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | list }}"
      vars:
        freeipa_item_server:
          address: "{{ item }}"
          port: "{{ freeipa_port | default('80') }}"
          weight: 1
          health_check: max_fails=3 fail_timeout=5s

    - name: install nginx
      import_role:
        name: nginxinc.nginx
      vars:
        nginx_cleanup_config: no
        nginx_http_template_enable: no
        nginx_main_template_enable: no

    - name: generate certificates
      import_role:
        name: nephelaiio.acme_certificate_route53

    - name: configure nginx
      import_role:
        name: nginxinc.nginx
      vars:
        nginx_cleanup_config: yes
        nginx_http_template_enable: yes
        nginx_main_template_enable: yes

    - name: update nginx pdns record
      uri:
        url: "{{ pdns_url }}/api/v1/servers/localhost/zones/{{ pdns_url_zone }}"
        method: PATCH
        return_content: yes
        body_format: json
        body:
          rrsets:
            - name: "{{ pdns_url_host }}"
              type: A
              ttl: 3600
              changetype: REPLACE
              records:
                - content: "{{ ansible_default_ipv4.address }}"
                  disabled: no
                  set-ptr: no
                  comments: []
        headers:
          X-API-Key: "{{ pdns_api_key }}"
        status_code: 204
      vars:
        pdns_url_host: "{{ acme_certificate_domain }}."
        pdns_url_zone: "{{ pdns_url_host | split_with('.') | tail | join('.') }}"
      register: pdns_zones_query
