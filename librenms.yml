---
- name: Install Librenms

  hosts: librenms

  become: yes

  vars:

    librenms_root: /opt/librenms
    librenms_hostname: "{{ librenms_url | urlsplit('hostname') }}"
    mysql_packages:
      - mariadb-client
      - mariadb-server
      - python-mysqldb
    letsencrypt_basedir: /etc/letsencrypt
    letsencrypt_certdir: "{{ letsencrypt_basedir }}/live"
    letsencrypt_keydir: "{{ letsencrypt_basedir }}/keys"
    letsencrypt_account_keyfile: "{{ letsencrypt_keydir }}/id_rsa.letsencrypt"
    letsencrypt_domain: "{{ librenms_hostname }}"
    letsencrypt_zone: "{{ librenms_hostname | split_with('.') | tail | join('.') }}"
    letsencrypt_domain_keyfile: "{{ letsencrypt_keydir }}/id_rsa.{{ letsencrypt_domain }}"
    letsencrypt_domain_csrfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.csr"
    letsencrypt_domain_crtfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.crt"
    letsencrypt_domain_chainfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.chain.crt"
    composer_path: /usr/local/bin/composer
    nginx_group: www-data
    librenms_group: librenms
    librenms_user: librenms

  roles:

    - nephelaiio.plugins

  tasks:

    - name: include private variables
      include_vars:
        dir: "{{ variables }}"

    - name: install mysql
      include_role:
        name: geerlingguy.mysql
      vars:
        mysql_databases:
          - name: "{{ librenms_db_name }}"
        mysql_users:
          - name: "{{ librenms_db_user }}"
            password: "{{ librenms_db_pass }}"
            priv: "{{ librenms_db_name }}.*:ALL"

    - name: disable mysql strict mode
      lineinfile:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        insertafter: '\[mysqld\]'
        regexp: '^#?{{ item | split_with("=") | first }}\s*='
        line: "{{ item }}"
      with_items:
        - 'lower_case_table_names=0'
        - 'sql-mode=""'
        - 'innodb_file_per_table=1'
      notify: restart mysql

    - meta: flush_handlers

    - name: install php
      include_role:
        name: geerlingguy.php
      vars:
        php_packages_extra:
          - php-cli
          - php-curl
          - php-mcrypt
          - php-mysql
          - php-snmp
          - php-zip
          - php-xml
          - python-memcache
          - python-mysqldb
        php_webserver_daemon: nginx
        php_use_managed_ini: no

    - name: set php timezone
      lineinfile:
        path: "{{ item }}"
        regexp: ';?date.timezone\s*='
        line: "date.timezone = {{ timezone }}"
      with_items:
        - /etc/php/7.0/cli/php.ini
        - /etc/php/7.0/fpm/php.ini
      notify: restart fpm

    - name: enable php mcrypt
      command: phpenmod mcrypt
      changed_when: false

    - name: install librenms packages
      package:
        name:
          - composer
          - fping
          - git
          - graphviz
          - mtr-tiny
          - nmap
          - rrdtool
          - snmp
          - snmpd
          - whois
          - monitoring-plugins
          - rrdcached
        state: latest

    - name: install php composer
      include_role:
        name: geerlingguy.composer
      vars:
        composer_keep_updated: yes

    - name: update librenms pdns record
      uri:
        url: "{{ pdns_url }}/api/v1/servers/localhost/zones/{{ librenms_url_zone }}"
        method: PATCH
        return_content: yes
        body_format: json
        body:
          rrsets:
            - name: "{{ librenms_url_host }}"
              type: A
              ttl: 3600
              changetype: REPLACE
              records:
                - content: "{{ ansible_default_ipv4.address }}"
                  disabled: no
                  set-ptr: no
                  comments: []
        headers:
          X-API-Key: "{{ pdns_api_key }}"
        status_code: 204
      vars:
        librenms_url_host: "{{ librenms_url | urlsplit('hostname') }}."
        librenms_url_zone: "{{ librenms_url_host | split_with('.') | tail | join('.') }}"
      register: pdns_zones_query

    - name: create letsencrypt folders
      file:
        path: "{{ item }}"
        mode: 0755
        state: directory
      with_items:
        - "{{ letsencrypt_certdir }}"
        - "{{ letsencrypt_keydir }}"

    - name: create key
      shell: 'ssh-keygen -t rsa -b 2048 -C "{{ letsencrypt_email }}" -f {{ letsencrypt_account_keyfile }} -q -N ""'
      args:
        creates: "{{ letsencrypt_account_keyfile }}"

    - name: create domain key
      shell: 'ssh-keygen -t rsa -b 2048 -C "{{ letsencrypt_email }}" -f {{ letsencrypt_domain_keyfile }} -q -N ""'
      args:
        creates: "{{ letsencrypt_domain_keyfile }}"

    - name: create csr
      shell: 'openssl req -new -nodes -key {{ letsencrypt_domain_keyfile }} -out {{ letsencrypt_domain_csrfile }} -subj "/CN={{ letsencrypt_domain }}"'
      changed_when: false

    - name: create challenge
      acme_certificate:
        account_key: "{{ letsencrypt_account_keyfile }}"
        challenge: dns-01
        csr: "{{ letsencrypt_domain_csrfile }}"
        dest: "{{ letsencrypt_domain_crtfile }}"
        fullchain_dest: "{{ letsencrypt_domain_chainfile }}"
        terms_agreed: yes
        acme_directory: https://acme-v01.api.letsencrypt.org/directory
      register: letsencrypt_challenge

    - name: install pip
      include_role:
        name: nephelaiio.pip

    - name: install route53 dependencies
      pip:
        name: boto

    - name: create route53 txt record for certificate validation
      route53:
        command: create
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        zone: "{{ letsencrypt_zone }}"
        record: "{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]['dns-01']['resource'] }}.{{ letsencrypt_domain }}"
        retry_interval: 300
        type: TXT
        ttl: 7200
        value: '"{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]["dns-01"]["resource_value"] }}"'
        wait: yes
        overwrite: yes
      when: "'challenge_data' in letsencrypt_challenge"
      ignore_errors: yes

    - name: wait for txt record propagation
      pause:
        seconds: 60
      when: "'challenge_data' in letsencrypt_challenge"

    - name: validate challenge
      acme_certificate:
        account_key: "{{ letsencrypt_account_keyfile }}"
        challenge: dns-01
        csr: "{{ letsencrypt_domain_csrfile }}"
        dest: "{{ letsencrypt_domain_crtfile }}"
        fullchain_dest: "{{ letsencrypt_domain_chainfile }}"
        data: "{{ letsencrypt_challenge }}"
        terms_agreed: yes
        acme_directory: https://acme-v01.api.letsencrypt.org/directory
      when: "'challenge_data' in letsencrypt_challenge"

    - name: delete route53 txt record for certificate validation
      route53:
        command: delete
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        zone: "{{ letsencrypt_zone }}"
        record: "{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]['dns-01']['resource'] }}.{{ letsencrypt_zone }}"
        retry_interval: 300
        type: TXT
        ttl: 7200
        value: '"{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]["dns-01"]["resource_value"] }}"'
        wait: yes
      when: "'challenge_data' in letsencrypt_challenge"
      ignore_errors: yes

    - name: install nginx
      include_role:
        name: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: true
        nginx_vhosts:
          - listen: "80"
            server_name: "{{ librenms_hostname }}"
            filename: "{{ librenms_hostname }}.http.conf"
            access_log: "/var/log/nginx/{{ librenms_hostname }}.access.log"
            error_log: "/var/log/nginx/{{ librenms_hostname }}.error.log"
            extra_parameters: |
              return 301 https://{{ librenms_hostname }}$request_uri;
          - listen: "443 ssl"
            root: "{{ librenms_root }}/html"
            server_name: "{{ librenms_hostname }}"
            index: index.php
            filename: "{{ librenms_hostname }}.https.conf"
            access_log: "/var/log/nginx/{{ librenms_hostname }}.access.log"
            error_log: "/var/log/nginx/{{ librenms_hostname }}.error.log"
            extra_parameters: |
              keepalive_timeout   300;
              ssl_certificate {{ letsencrypt_domain_chainfile }};
              ssl_certificate_key {{ letsencrypt_domain_keyfile }};
              ssl_session_cache   shared:SSL:10m;
              ssl_session_timeout 10m;
              ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
              ssl_prefer_server_ciphers on;
              ssl_stapling on;
              ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA;
              charset utf-8;
              gzip on;
              gzip_types text/css application/javascript text/javascript application/x-javascript image/svg+xml text/plain text/xsd text/xsl text/xml image/x-icon;
              location / {
                try_files $uri $uri/ /index.php?$query_string;
              }
              location /api/v0 {
                try_files $uri $uri/ /api_v0.php?$query_string;
              }
              location ~ \.php {
                include fastcgi.conf;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
              }
              location ~ /\.ht {
                deny all;
              }

    - name: create librenms group
      group:
        name: "{{ librenms_group }}"

    - name: manage nginx group memberships
      user:
        append: yes
        name: "{{ nginx_user }}"
        groups: "{{ librenms_group }}"
      notify:
        - restart nginx
        - restart fpm

    - name: create librenms user
      user:
        name: "{{ librenms_user }}"
        group: "{{ librenms_group }}"
        groups: "{{ nginx_group }}"
        system: yes

    - name: set librenms root folder permissions
      file:
        path: "{{ librenms_root | basename }}"
        owner: "{{ librenms_user }}"
        group: "{{ librenms_group }}"
        state: directory
        recurse: yes

    - name: install librenms
      command: "{{ composer_path }} create-project --no-dev --keep-vcs  librenms/librenms {{ librenms_root | basename }} dev-master"
      args:
        chdir: "{{ librenms_root | dirname }}"
        creates: "{{ librenms_root }}"
      changed_when: false

    - name: set librenms permissions
      file:
        path: "{{ librenms_root }}"
        owner: "{{ librenms_user }}"
        group: "{{ librenms_group }}"
        mode: 0775
        state: directory
        recurse: yes
      notify:
        - restart nginx
        - restart fpm

    - name: set librenms acl permissions
      acl:
        path: "{{ item }}"
        default: yes
        recursive: yes
        state: present
        permissions: rwx
        etype: group
      with_items:
        - /opt/librenms/rrd
        - /opt/librenms/logs
        - /opt/librenms/bootstrap/cache/
        - /opt/librenms/storage/
      notify: restart nginx

    - name: run daily job
      command: "{{ librenms_root }}/daily.sh"
      become: yes
      become_user: "{{ librenms_user }}"

    - name: manage librenms cron job
      copy:
        src: "{{ librenms_root }}/librenms.nonroot.cron"
        dest: /etc/cron.d/librenms
        remote_src: yes
      notify: restart cron

    - name: modify librenms cronjob poll interval
      lineinfile:
        path: /etc/cron.d/librenms
        regexp: '^\S+/\S+ (.*poller-wrapper\.py.*) \d+$'
        line: '*/{{ librenms_poll_interval_min }} \1 {{ ansible_processor_vcpus }}'
        backrefs: yes
      notify: restart cron

    - name: manage librenms logrotate configuration
      copy:
        src: "{{ librenms_root }}/misc/librenms.logrotate"
        dest: /etc/logrotate.d/librenms
        remote_src: yes

    - name: manage librenms configuration
      template:
        src: librenms/config.php.j2
        dest: "{{ librenms_root }}/config.php"
        mode: 0750
      vars:
        librenms_config_db_name: "{{ librenms_db_name }}"
        librenms_config_db_user: "{{ librenms_db_user }}"
        librenms_config_db_pass: "{{ librenms_db_pass }}"
        librenms_config_root: "{{ librenms_root }}"
        librenms_config_url: "{{ librenms_url }}"
        librenms_config_graylog_url: "{{ graylog_url }}"
        librenms_config_graylog_port: 443
        librenms_config_graylog_user: "{{ graylog_admin_user }}"
        librenms_config_graylog_pass: "{{ graylog_admin_pass }}"
        librenms_config_graylog_version: 2.4
        librenms_config_influxdb_host: "127.0.0.1"
        librenms_config_influxdb_port: "{{ influxdb_api_port }}"
        librenms_config_influxdb_db_name: "{{ librenms_influxdb_db_name }}"
        librenms_config_influxdb_user_name: "{{ librenms_influxdb_user_name }}"
        librenms_config_influxdb_user_pass: "{{ librenms_influxdb_user_pass }}"
        librenms_config_influxdb_proto: "{{ influxdb_api_proto }}"
      notify: restart fpm

    - name: configure rrdcached
      lineinfile:
        path: /etc/default/rrdcached
        regexp: '^{{ item.setting }}='
        line: '{{ item.setting }}={{ item.value }}'
      with_items:
        - setting: DAEMON
          value: /usr/bin/rrdcached
        - setting: DAEMON_USER
          value: librenms
        - setting: DAEMON_GROUP
          value: librenms
        - setting: WRITE_THREADS
          value: 4
        - setting: WRITE_TIMEOUT
          value: 1800
        - setting: WRITE_JITTER
          value: 1800
        - setting: BASE_PATH
          value: /opt/librenms/rrd/
        - setting: JOURNAL_PATH
          value: /var/lib/rrdcached/journal/
        - setting: PIDFILE
          value: /run/rrdcached.pid
        - setting: SOCKFILE
          value: /run/rrdcached.sock
        - setting: SOCKGROUP
          value: librenms
        - setting: BASE_OPTIONS
          value: '-B -F -R'
      notify: restart rrdcached

    - name: set rrdcached permissions
      file:
        state: directory
        owner: "{{ librenms_user }}"
        group: "{{ librenms_group }}"
        path: /var/lib/rrdcached/journal
      notify: restart rrdcached

    - name: install nfs client
      include_role:
        name: nephelaiio.nfs
      vars:
        nfs_server: no

    - name: mount backup target
      mount:
        path: "{{ backup_root }}"
        src: "{{ backup_host }}:{{ backup_export_root }}"
        fstype: nfs
        state: mounted

    - name: register backup binary locations
      set_fact:
        librenms_backup_bin: "{{ backup_bin_root }}/librenms-backup"
        librenms_restore_bin: "{{ backup_bin_root }}/librenms-restore"

    - name: create librenms backup script
      template:
        src: librenms/librenms-backup.sh.j2
        dest: "{{ librenms_backup_bin }}"
        group: root
        owner: root
        mode: 0750
      vars:
        backup_identifier: librenms
        backup_path: "{{ backup_root }}"
        backup_source: "{{ librenms_root }}/config.php {{ librenms_root }}/rrd"
        mysql_user: "{{ librenms_db_user }}"
        mysql_pass: "{{ librenms_db_pass }}"
        mysql_db: "{{ librenms_db_name }}"
        retention_period: 3

    - name: create librenms restore script
      template:
        src: librenms/librenms-restore.sh.j2
        dest: "{{ librenms_restore_bin }}"
        group: root
        owner: root
        mode: 0750
      vars:
        backup_identifier: librenms
        backup_path: "{{ backup_root }}"
        mysql_user: "{{ librenms_db_user }}"
        mysql_pass: "{{ librenms_db_pass }}"
        mysql_db: "{{ librenms_db_name }}"

    - name: manage librenms backup cronjob
      cron:
        name: librenms-conf-backup
        job: "{{ librenms_backup_bin }}"
        special_time: daily

    - name: create librenms backup motd pointers
      copy:
        dest: /etc/update-motd.d/99-librenms
        content: |
          #!/usr/bin/env bash
          echo run {{ librenms_backup_bin | basename }} to manually force librenms backup creation
          echo run {{ librenms_restore_bin | basename }} to manually restore latest librenms backup
          echo
        mode: 0755

  post_tasks:

    - name: create influxdb database
      influxdb_database:
        database_name: "{{ librenms_influxdb_db_name }}"
        username: "{{ influxdb_admin_user_name }}"
        password: "{{ influxdb_admin_user_pass }}"
      delegate_to: "{{ item }}"
      with_items: "{{ groups['influxdb'] }}"
      run_once: yes

    - name: create influxdb users
      influxdb_user:
        user_name: "{{ librenms_influxdb_user_name }}"
        user_password: "{{ librenms_influxdb_user_pass }}"
        username: "{{ influxdb_admin_user_name }}"
        password: "{{ influxdb_admin_user_pass }}"
      delegate_to: "{{ item }}"
      with_items: "{{ groups['influxdb'] }}"
      run_once: yes

    - name: configure influxdb permissions
      command: influx -execute "GRANT ALL ON {{ librenms_influxdb_db_name }} TO {{ librenms_influxdb_user_name }}" -username "{{ influxdb_admin_user_name }}" -password "{{ influxdb_admin_user_pass }}"
      delegate_to: "{{ item }}"
      with_items: "{{ groups['influxdb'] }}"
      run_once: yes

  handlers:

    - name: restart mysql
      service:
        name: mysql
        state: restarted

    - name: restart fpm
      service:
        name: php7.0-fpm
        state: restarted

    - name: restart nginx
      service:
        name: nginx
        state: restarted

    - name: restart cron
      service:
        name: cron
        state: restarted

    - name: restart rrdcached
      service:
        name: rrdcached
        state: restarted


- name: Configure Librenms devices

  hosts: nuc:raspberry:!offline

  become: yes

  roles:

    - nephelaiio.plugins

  tasks:

    - name: include private variables
      include_vars:
        dir: "{{ variables }}"
      tags:
        - devices

    - name: install snmpd
      package:
        name: snmpd
        state: latest

    - name: configure snmpd
      template:
        src: librenms/snmpd.conf.j2
        dest: /etc/snmp/snmpd.conf
      vars:
        snmpd_location: home
        snmpd_contact: "{{ snmp_contact }}"
        snmpd_community: "{{ snmp_community }}"
      notify: restart snmpd

    - name: configure snmp daemon options
      lineinfile:
        path: /etc/default/snmpd
        backrefs: yes
        regexp: "^SNMPDOPTS='-L(s|S[0-7!acewnid]d)(.*)$"
        line: "SNMPDOPTS='-LSed\\2"
      when: ansible_os_family == 'Debian'
      notify: restart snmpd

    - name: start snmpd
      service:
        name: snmpd
        state: started
        enabled: yes

    - name: query librenms devices
      uri:
        url: "{{ librenms_url }}/api/v0/devices"
        body_format: json
        headers:
          X-Auth-Token: "{{ librenms_api_token }}"
        return_content: yes
      register: librenms_devices
      tags:
        - devices

    - name: map librenms registrations
      set_fact:
        librenms_hostnames: "{{ librenms_devices.json.devices | map(attribute='hostname') | list }}"
      tags:
        - devices

    - name: create librenms devices
      uri:
        url: "{{ librenms_url }}/api/v0/devices"
        method: POST
        body_format: json
        body:
          hostname: "{{ inventory_hostname }}"
          version: v2c
          community: "{{ snmp_community }}"
        headers:
          X-Auth-Token: "{{ librenms_api_token }}"
        return_content: yes

  handlers:

    - name: restart snmpd
      service:
        name: snmpd
        state: restarted
