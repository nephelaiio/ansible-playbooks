---
- name: Install Librenms

  hosts: librenms

  become: yes

  vars:

    librenms_root: /var/www/librenms
    librenms_hostname: "{{ librenms_url | urlsplit('hostname') }}"
    mysql_packages:
      - mariadb-client
      - mariadb-server
      - python-mysqldb
    nginx_remove_default_vhost: true
    nginx_vhosts:
      - listen: 443 ssl http2
        server_name: "{{ librenms_hostname }}"
        root: "{{ librenms_root }}"
        index: index.php
        state: present
        filename: "librenms.conf"
        access_log: "/var/log/nginx/{{ librenms_hostname }}.access.log"
        error_log: "/var/log/nginx/{{ librenms_hostname }}.error.log"
    letsencrypt_basedir: /etc/letsencrypt
    letsencrypt_certdir: "{{ letsencrypt_basedir }}/live"
    letsencrypt_keydir: "{{ letsencrypt_basedir }}/keys"
    letsencrypt_account_keyfile: "{{ letsencrypt_keydir }}/id_rsa.letsencrypt"
    letsencrypt_domain: "{{ librenms_hostname }}"
    letsencrypt_zone: "{{ librenms_hostname | split_with('.') | tail | join('.') }}"
    letsencrypt_domain_keyfile: "{{ letsencrypt_keydir }}/id_rsa.{{ letsencrypt_domain }}"
    letsencrypt_domain_csrfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.csr"
    letsencrypt_domain_crtfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.crt"
    letsencrypt_domain_chainfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.chain.crt"

  roles:

    - nephelaiio.plugins

  tasks:

    - name: include private variables
      include_vars:
        dir: "{{ variables }}"

    - name: install mysql
      include_role:
        name: geerlingguy.mysql
      vars:
        mysql_databases:
          - name: "{{ librenms_db_name }}"
        mysql_users:
          - name: "{{ librenms_db_user }}"
            password: "{{ librenms_db_pass }}"
            priv: "{{ librenms_db_name }}.*:ALL"

    - name: disable mysql strict mode
      lineinfile:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        insertafter: '\[mysqld\]'
        regexp: '^#?{{ item | split_with("=") | first }}\s*='
        line: "{{ item }}"
      with_items:
        - 'lower_case_table_names=0'
        - 'sql-mode=""'
        - 'innodb_file_per_table=1'
      notify: restart mysql

    - name: install php
      include_role:
        name: geerlingguy.php
      vars:
        php_packages_extra:
          - php-cli
          - php-curl
          - php-mcrypt
          - php-mysql
          - php-snmp
          - php-zip
          - php-xml
          - python-memcache
          - python-mysqldb
        php_webserver_daemon: nginx
        php_use_managed_ini: no

    - name: set php timezone
      lineinfile:
        path: "{{ item }}"
        regexp: ';?date.timezone\s*='
        line: "date.timezone = {{ timezone }}"
      with_items:
        - /etc/php/7.0/cli/php.ini
        - /etc/php/7.0/fpm/php.ini

    - name: enable php mcrypt
      command: phpenmod mcrypt
      changed_when: false

    - name: install librenms packages
      package:
        name:
          - composer
          - fping
          - git
          - graphviz
          - mtr-tiny
          - nmap
          - rrdtool
          - snmp
          - snmpd
          - whois
        state: latest

    - name: create librenms dns record
      nsupdate:
        server: "{{ servers.dns | first }}"
        zone: "{{ base_domain }}"
        record: "{{ librenms_hostname | split_with('.') | first }}"
        type: A
        value: "{{ ansible_default_ipv4.address }}"
      delegate_to: "{{ groups['pdns'] | first }}"

    - name: create letsencrypt folders
      file:
        path: "{{ item }}"
        mode: 0755
        state: directory
      with_items:
        - "{{ letsencrypt_certdir }}"
        - "{{ letsencrypt_keydir }}"

    - name: create key
      shell: 'ssh-keygen -t rsa -b 2048 -C "{{ letsencrypt_email }}" -f {{ letsencrypt_account_keyfile }} -q -N ""'
      args:
        creates: "{{ letsencrypt_account_keyfile }}"

    - name: create domain key
      shell: 'ssh-keygen -t rsa -b 2048 -C "{{ letsencrypt_email }}" -f {{ letsencrypt_domain_keyfile }} -q -N ""'
      args:
        creates: "{{ letsencrypt_domain_keyfile }}"

    - name: create csr
      shell: 'openssl req -new -nodes -key {{ letsencrypt_domain_keyfile }} -out {{ letsencrypt_domain_csrfile }} -subj "/CN={{ letsencrypt_domain }}"'
      changed_when: false

    - name: create challenge
      letsencrypt:
        account_key: "{{ letsencrypt_account_keyfile }}"
        challenge: dns-01
        csr: "{{ letsencrypt_domain_csrfile }}"
        dest: "{{ letsencrypt_domain_crtfile }}"
        fullchain_dest: "{{ letsencrypt_domain_chainfile }}"
        terms_agreed: yes
        acme_directory: https://acme-v01.api.letsencrypt.org/directory
      register: letsencrypt_challenge

    - name: install pip
      include_role:
        name: nephelaiio.pip

    - name: install route53 dependencies
      pip:
        name: boto

    - name: create route53 txt record for certificate validation
      route53:
        command: create
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        zone: "{{ letsencrypt_zone }}"
        record: "{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]['dns-01']['resource'] }}.{{ letsencrypt_domain }}"
        retry_interval: 300
        type: TXT
        ttl: 7200
        value: '"{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]["dns-01"]["resource_value"] }}"'
        wait: yes
        overwrite: yes
      when: "'challenge_data' in letsencrypt_challenge"
      ignore_errors: yes

    - name: wait for txt record propagation
      pause:
        seconds: 60
      when: "'challenge_data' in letsencrypt_challenge"

    - name: validate challenge
      letsencrypt:
        account_key: "{{ letsencrypt_account_keyfile }}"
        challenge: dns-01
        csr: "{{ letsencrypt_domain_csrfile }}"
        dest: "{{ letsencrypt_domain_crtfile }}"
        fullchain_dest: "{{ letsencrypt_domain_chainfile }}"
        data: "{{ letsencrypt_challenge }}"
        terms_agreed: yes
        acme_directory: https://acme-v01.api.letsencrypt.org/directory
      when: "'challenge_data' in letsencrypt_challenge"

    - name: delete route53 txt record for certificate validation
      route53:
        command: delete
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        zone: "{{ letsencrypt_zone }}"
        record: "{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]['dns-01']['resource'] }}.{{ letsencrypt_zone }}"
        retry_interval: 300
        type: TXT
        ttl: 7200
        value: '"{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]["dns-01"]["resource_value"] }}"'
        wait: yes
      when: "'challenge_data' in letsencrypt_challenge"
      ignore_errors: yes


    - name: install nginx
      include_role:
        name: geerlingguy.nginx
      vars:
        nginx_vhosts:
          - listen: "443 ssl"
            server_name: "{{ awx_hostname }}"
            filename: "{{ awx_hostname }}.conf"
            access_log: "/var/log/nginx/{{ awx_hostname }}.access.log"
            error_log: "/var/log/nginx/{{ awx_hostname }}.error.log"
            extra_parameters: |
              keepalive_timeout   300;
              ssl_certificate {{ letsencrypt_domain_chainfile }};
              ssl_certificate_key {{ letsencrypt_domain_keyfile }};
              ssl_session_cache   shared:SSL:10m;
              ssl_session_timeout 10m;
              ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
              ssl_prefer_server_ciphers on;
              ssl_stapling on;
              ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA;
              charset utf-8;
              gzip on;
              gzip_types text/css application/javascript text/javascript application/x-javascript image/svg+xml text/plain text/xsd text/xsl text/xml image/x-icon;
              location / {
                try_files $uri $uri/ /index.php?$query_string;
              }
              location /api/v0 {
                try_files $uri $uri/ /api_v0.php?$query_string;
              }
              location ~ \.php {
                include fastcgi.conf;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
              }
              location ~ /\.ht {
                deny all;
              }
              location / {
                proxy_pass {{ awx_backend_proto }}://127.0.0.1:{{ awx_port }}/;
                proxy_http_version 1.1;
                proxy_set_header   Host               $host;
                proxy_set_header   X-Real-IP          $remote_addr;
                proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
                proxy_set_header   X-Forwarded-Proto  $scheme;
                proxy_set_header   Upgrade            $http_upgrade;
                proxy_set_header   Connection         "upgrade";
              }

  handlers:

    - name: restart mysql
      service:
        name: mysql
        state: restarted
