---
- name: Configure dns recursors

  hosts: pdns_recursors

  become: yes

  vars:

    default_nameservers:
      - 1.1.1.1
      - 8.8.8.8
    pdns_rec_api_addr: 127.0.0.1
    pdns_rec_api_dir: /etc/powerdns/recursor.d
    pdns_rec_api_port: 8082
    pdns_rec_user: pdns
    pdns_rec_group: pdns
    pdns_rec_service_overrides:
      ReadWritePaths: "{{ pdns_rec_api_dir }}"
    pdns_rec_config:
      setuid: "{{ pdns_rec_user }}"
      setgid: "{{ pdns_rec_group }}"
      webserver: yes
      forward-zones: ''
      forward-zones-recurse: ''
      webserver-port: "{{ pdns_rec_api_port }}"
      webserver-address: "{{ pdns_rec_api_addr }}"
      api-key: "{{ pdns_rec_api_key }}"
      api-config-dir: "{{ pdns_rec_api_dir }}"
      api-readonly: no
      include-dir: "{{ pdns_rec_api_dir }}"
      local-address: 0.0.0.0
      max-cache-ttl: 15
      max-negative-ttl: 15

    acme_certificate_domain: "{{ inventory_hostname }}"
    acme_certificate_chainfile: "/etc/nginx/{{ acme_certificate_domain }}.chain.crt"
    acme_certificate_keyfile: "/etc/nginx/{{ acme_certificate_domain }}.key"
    acme_certificate_add_ca: yes
    acme_certificate_aws_accesskey_id: "{{ aws_access_key_id | default(lookup('env', 'AWS_ACCESS_KEY_ID')) }}"
    acme_certificate_aws_accesskey_secret: "{{ aws_secret_access_key | default(lookup('env', 'AWS_SECRET_ACCESS_KEY')) }}"

    nginx_install_from: os_repository
    nginx_cleanup_config_path:
      - /etc/nginx/conf.d
      - /etc/nginx/sites-enabled/default
      - /etc/nginx/sites-available/default
    nginx_main_template:
      conf_file_name: nginx.conf
      conf_file_location: /etc/nginx/
      user: www-data
      worker_processes: auto
      error_level: warn
      worker_connections: 1024
      http_enable: true
      http_settings:
        keepalive_timeout: 60
        cache: false
        rate_limit: false
        keyval: false
      stream_enable: false
      http_global_autoindex: false
      server_tokens: off
    nginx_http_template:
      default:
        port: 80
        server_name: "{{ acme_certificate_domain }}"
        conf_file_name: "{{ acme_certificate_domain }}.http.conf"
        https_redirect: yes
      pdns:
        port: 443
        server_name: "{{ acme_certificate_domain }}"
        conf_file_name: "{{ acme_certificate_domain }}.https.conf"
        ssl:
          key: "{{ acme_certificate_keyfile }}"
          cert: "{{ acme_certificate_chainfile }}"
          protocols: TLSv1.2 TLSv1.3
          ciphers: HIGH:!aNULL:!MD5
        reverse_proxy:
          locations:
            default:
              location: /
              proxy_pass: http://pdns
              proxy_set_header:
                header_host:
                  name: Host
                  value: $host
                header_upgrade:
                  name: Upgrade
                  value: $http_upgrade
                header_connection:
                  name: Connection
                  value: Upgrade
                header_x_forwarded_for:
                  name: X-Forwarded-For
                  value: $proxy_add_x_forwarded_for
        upstreams:
          pdns:
            name: pdns
            lb_method: least_conn
            zone_name: pdns
            zone_size: 32k
            sticky_cookie: false
            servers:
              localhost:
                address: "{{ pdns_rec_api_addr }}"
                port: "{{ pdns_rec_api_port }}"

  roles:

    - nephelaiio.plugins
    - bertvv.hosts

  pre_tasks:

    - block:

        - name: build recursor host metadata
          set_fact:
            hosts_entries: "{{ (hosts_entries | default([])) | union([recursor_host]) }}"
          loop_control:
            label: "{{ item }}"
          vars:
            recursor_host:
              name: "{{ hostvars[item]['ansible_fqdn'] }}"
              ip: "{{ hostvars[item]['ansible_default_ipv4']['address'] }}"
          loop: "{{ play_hosts }}"

      run_once: yes

  tasks:

    - name: remove bind recursor
      apt:
        package: bind9
        state: absent
        purge: yes

      when:
        - ansible_os_family is defined
        - ansible_os_family == 'Debian'
        - ansible_distribution_release == 'bionic'

    - name: disable systemd-resolved
      service:
        name: systemd-resolved
        state: stopped
        enabled: no
      register: systemd_resolved_svc

    - name: bootstrap resolv.conf
      include_role:
        name: ahuffman.resolv
      vars:
        resolv_nameservers: "{{ nameservers | default(default_nameservers) }}"
        resolv_domain: "{{ base_domain }}"
        resolv_options:
          - timeout:2
          - rotate
      when: systemd_resolved_svc.changed

    - name: install pdns recursor
      include_role:
        name: PowerDNS.pdns_recursor
      ignore_errors: yes

    - block:

        - name: set netplan facts
          set_fact:
            netplan_config_file: "/etc/netplan/{{ ansible_default_ipv4.alias }}.yaml"
            netplan_iface: "{{ ansible_default_ipv4 }}"
            netplan_ipaddr: "{{ (ansible_default_ipv4.address + '/' + ansible_default_ipv4.netmask) | ipv4 }}"
            netplan_nameservers: "{{ play_hosts | map('extract', hostvars, 'ansible_host') | list }}"

        - name: find existing netplan files
          find:
            paths: "{{ netplan_config_file | dirname }}"
            patterns: "*.yml,*.yaml"
          register: netplan_query

        - name: define netplan configuration
          copy:
            dest: "{{ netplan_config_file }}"
            content: |
              ---
              {{ network_config }}
          vars:
            network_config: |
              network:
                version: 2
                ethernets:
                  {{ netplan_iface.alias }}:
                    match:
                      macaddress: {{ netplan_iface.macaddress }}
                    addresses:
                      - {{ netplan_ipaddr }}
                    gateway4: {{ netplan_iface.gateway }}
                    nameservers:
                      search:
                        - {{ base_domain }}
                      addresses:
                        - 127.0.0.1
          notify: restart networking

        - name: remove existing netplan files
          file:
            path: "{{ netplan_file }}"
            state: absent
          become: true
          loop_control:
            loop_var: netplan_file
          loop: "{{ netplan_query.files | map(attribute='path') | list }}"
          when:
            - netplan_file != netplan_config_file
          notify: restart networking

        - name: manage resolv.conf
          include_role:
            name: ahuffman.resolv
          vars:
            resolv_nameservers:
              - 127.0.0.1
            resolv_domain: "{{ base_domain }}"
            resolv_options:
              - timeout:2
              - rotate

      when:
        - ansible_os_family is defined
        - ansible_os_family == 'Debian'
        - ansible_distribution_release == 'bionic'

    - name: install pdns recursor
      include_role:
        name: PowerDNS.pdns_recursor

    - name: fix configuration file permissions
      file:
        path: /etc/powerdns
        state: directory
        owner: "{{ pdns_rec_user }}"
        group: "{{ pdns_rec_group }}"
        recurse: yes

  post_tasks:

    - name: install nginx
      import_role:
        name: nginxinc.nginx
      vars:
        nginx_cleanup_config: no
        nginx_http_template_enable: no
        nginx_main_template_enable: no

    - name: generate certificates
      import_role:
        name: nephelaiio.acme_certificate_route53

    - name: configure nginx
      import_role:
        name: nginxinc.nginx
      vars:
        nginx_cleanup_config: yes
        nginx_http_template_enable: yes
        nginx_main_template_enable: yes

  handlers:

    - name: netplan apply
      command: netplan apply
      listen: restart networking

    - name: restart systemd-networkd
      service:
        name: systemd-networkd
        state: restarted
      listen: restart networking
