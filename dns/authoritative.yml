---
- name: Configure pdns authoritative server

  hosts: pdns

  become: yes

  vars:

    pdns_recursors: "{{ groups['recursors'] | default([]) }}"
    pdns_hostname: "{{ pdns_url | urlsplit('hostname') }}"
    pdns_config:
      api: yes
      api-key: "{{ pdns_api_key }}"
      webserver: yes
      webserver-address: 127.0.0.1
      webserver-port: "{{ pdns_api_port }}"
      webserver-allow-from: 127.0.0.1
      dnsupdate: no
      master: "{{ (pdns_master | default('no')) | bool }}"
      slave: "{{ not ((pdns_master | default('no')) | bool) }}"
      disable-axfr: "{{ not ((pdns_master | default('no')) | bool) }}"
      allow-axfr-ips: "{{ play_hosts | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | join(',') }}"
      setuid: pdns
      setgid: pdns
      local-address: "{{ ansible_host }}:53"
      security-poll-suffix: ''
      default-soa-name: "{{ play_hosts | first | map(attribute='inventory_hostname') }}"
      default-soa-mail: "{{ dns_master }}"
      default-ttl: "{{ dns_ttl }}"
    pdns_backends:
      gpgsql:
        user: "{{ pdns_mysql_user }}"
        host: 127.0.0.1
        password: "{{ pdns_mysql_pass }}"
        dbname: pdns

    letsencrypt_basedir: /etc/letsencrypt
    letsencrypt_certdir: "{{ letsencrypt_basedir }}/live"
    letsencrypt_keydir: "{{ letsencrypt_basedir }}/keys"
    letsencrypt_account_keyfile: "{{ letsencrypt_keydir }}/id_rsa.letsencrypt"
    letsencrypt_domain: "{{ pdns_hostname }}"
    letsencrypt_zone: "{{ pdns_hostname | split_with('.') | tail | join('.') }}"
    letsencrypt_record: "{{ pdns_hostname | split_with('.') | head }}"
    letsencrypt_domain_keyfile: "{{ letsencrypt_keydir }}/id_rsa.{{ letsencrypt_domain }}"
    letsencrypt_domain_csrfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.csr"
    letsencrypt_domain_crtfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.crt"
    letsencrypt_domain_chainfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.chain.crt"

  roles:

    - nephelaiio.plugins
    - nephelaiio.pip
    - bertvv.hosts

  pre_tasks:

    - block:

        - name: gather recursor metadata
          setup:
          delegate_to: "{{ item }}"
          delegate_facts: yes
          loop: "{{ pdns_recursors }}"
          tags:
            - always

        - name: build recursor host metadata
          set_fact:
            hosts_entries: "{{ (hosts_entries | default([])) | union([recursor_host]) }}"
          loop_control:
            label: "{{ item }}"
          vars:
            recursor_host:
              name: "{{ hostvars[item]['ansible_fqdn'] }}"
              ip: "{{ hostvars[item]['ansible_default_ipv4']['address'] }}"
          loop: "{{ pdns_recursors }}"
          tags:
            - always

      run_once: yes

  tasks:

    - name: install python dns modules
      pip:
        name: dnspython
        state: latest

    - name: install dns utilities
      apt:
        name: dnsutils
        state: latest

    - name: install postgresql
      include_role:
        name: geerlingguy.postgresql
      vars:
        postgresql_databases:
          - name: "{{ pdns_backends.gpgsql.dbname }}"
        postgresql_users:
          - name: "{{ pdns_backends.gpgsql.user }}"
            password: "{{ pdns_backends.gpgsql.password }}"
            encrypted: yes

    - name: initialize database schema
      postgresql_query:
        db: "{{ pdns_backends.gpgsql.dbname }}"
        query: "{{ lookup('template', 'schema.j2.sql') }}"
      become_user: postgres

    - name: set {{ pdns_backends.gpgsql.user }} table access
      postgresql_privs:
        db: "{{ pdns_backends.gpgsql.dbname }}"
        role: "{{ pdns_backends.gpgsql.user }}"
        objs: ALL_IN_SCHEMA
        privs: SELECT,INSERT,UPDATE,DELETE
        type: table
      become_user: postgres

    - name: set {{ pdns_backends.gpgsql.user }} schema access
      postgresql_privs:
        db: "{{ pdns_backends.gpgsql.dbname }}"
        role: "{{ pdns_backends.gpgsql.user }}"
        objs: ALL_IN_SCHEMA
        privs: USAGE
        type: sequence
      become_user: postgres

    - name: create temporary directory
      tempfile:
        state: directory
        prefix: pdns
      register: tmpdir
      changed_when: false

    - name: disable systemd-resolved
      service:
        name: systemd-resolved
        state: stopped
        enabled: no
      register: systemd_resolved_svc

    - name: bootstrap resolv.conf
      include_role:
        name: ahuffman.resolv
      vars:
        resolv_nameservers: "{{ nameservers }}"
        resolv_domain: "{{ base_domain }}"
        resolv_options:
          - timeout:2
          - rotate
      when: systemd_resolved_svc.changed

    - name: install powerdns
      include_role:
        name: PowerDNS.pdns
      vars:
        pdns_install_repo: "{{ pdns_auth_powerdns_repo_master }}"

    - meta: flush_handlers

    - name: create letsencrypt folders
      file:
        path: "{{ item }}"
        mode: 0755
        state: directory
      loop:
        - "{{ letsencrypt_certdir }}"
        - "{{ letsencrypt_keydir }}"

    - name: create key
      shell: 'ssh-keygen -t rsa -b 2048 -C "{{ acme_certificate_email }}" -f {{ letsencrypt_account_keyfile }} -q -N ""'
      args:
        creates: "{{ letsencrypt_account_keyfile }}"

    - name: create domain key
      shell: 'ssh-keygen -t rsa -b 2048 -C "{{ acme_certificate_email }}" -f {{ letsencrypt_domain_keyfile }} -q -N ""'
      args:
        creates: "{{ letsencrypt_domain_keyfile }}"

    - name: create csr
      shell: 'openssl req -new -nodes -key {{ letsencrypt_domain_keyfile }} -out {{ letsencrypt_domain_csrfile }} -subj "/CN={{ letsencrypt_domain }}"'
      changed_when: false

    - name: install route53 dependencies
      pip:
        name: boto
      tags:
        - nginx

    - name: create certificate challenge
      acme_certificate:
        account_key: "{{ letsencrypt_account_keyfile }}"
        challenge: dns-01
        csr: "{{ letsencrypt_domain_csrfile }}"
        dest: "{{ letsencrypt_domain_crtfile }}"
        fullchain_dest: "{{ letsencrypt_domain_chainfile }}"
        terms_agreed: yes
        acme_directory: https://acme-v01.api.letsencrypt.org/directory
      register: letsencrypt_challenge
      notify: generate certificate
      tags:
        - nginx

    - meta: flush_handlers
      tags:
        - always

    - name: install nginx
      include_role:
        name: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: true
        nginx_vhosts:
          - listen: 80
            server_name: "{{ pdns_hostname }}"
            filename: "{{ pdns_hostname }}.http.conf"
            access_log: "/var/log/nginx/{{ pdns_hostname }}.access.log"
            error_log: "/var/log/nginx/{{ pdns_hostname }}.error.log"
            extra_parameters: |
              return 301 https://{{ pdns_hostname }}$request_uri;
          - listen: "443 ssl"
            server_name: "{{ pdns_hostname }}"
            filename: "{{ pdns_hostname }}.https.conf"
            access_log: "/var/log/nginx/{{ pdns_hostname }}.access.log"
            error_log: "/var/log/nginx/{{ pdns_hostname }}.error.log"
            extra_parameters: |
              keepalive_timeout   300;
              ssl_certificate {{ letsencrypt_domain_chainfile }};
              ssl_certificate_key {{ letsencrypt_domain_keyfile }};
              ssl_session_cache   shared:SSL:10m;
              ssl_session_timeout 10m;
              ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
              ssl_prefer_server_ciphers on;
              ssl_stapling on;
              ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA;
              add_header Strict-Transport-Security max-age=31536000;
              add_header X-Frame-Options DENY;
              proxy_cache off;
              proxy_store off;
              location / {
                proxy_pass {{ pdns_api_proto }}://127.0.0.1:{{ pdns_api_port }}/;
                proxy_http_version 1.1;
                proxy_redirect     off;
                proxy_set_header   Host               $host;
                proxy_set_header   X-Real-IP          $remote_addr;
                proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
                proxy_set_header   X-Forwarded-Proto  $scheme;
                proxy_set_header   Upgrade            $http_upgrade;
                proxy_set_header   Connection         "upgrade";
              }
      tags:
        - nginx

    - name: reload nginx
      service:
        name: nginx
        state: reloaded
      tags:
        - nginx

    - name: query pdns zones
      uri:
        url: "{{ pdns_api_proto }}://localhost:{{ pdns_api_port }}/api/v1/servers/localhost/zones"
        method: GET
        headers:
          X-API-Key: "{{ pdns_api_key }}"
      register: pdns_zones_query
      tags:
        - always

    - name: build list of existing zones
      set_fact:
        pdns_zones: "{{ pdns_zones_query.json | map(attribute='id') | list }}"
      tags:
        - always

    - name: create zones
      command:
        "pdnsutil create-zone {{ zone_name }} {{ zone_ns }}"
      vars:
        zone: "{{ item.value }}"
        zone_name: "{{ zone.name }}."
        zone_ns: "{{ zone.ns | map('map_format', '%s.') | list | first | string }}"
      loop: "{{ dns_zones | dict2items }}"
      when: zone_name not in pdns_zones
      delegate_to: "{{ play_hosts[0] }}"
      tags:
        - zones

    - name: query zone records
      uri:
        url: "{{ pdns_api_proto }}://localhost:{{ pdns_api_port }}/api/v1/servers/localhost/zones/{{ zone_name }}"
        method: GET
        headers:
          X-API-Key: "{{ pdns_api_key }}"
      vars:
        zone_name: "{{ item }}."
      loop: "{{ pdns_domains | map(attribute='name') | list }}"
      register: pdns_records_query
      tags:
        - records

    - name: build list of existing records
      set_fact:
        pdns_records: "{{ pdns_records_query.results | map(attribute='json') | map(attribute='rrsets') | flatten | json_query(query) | list }}"
      vars:
        query: "[?type!='SOA'].name"
      tags:
        - records

    - name: create zone records
      uri:
        url: "{{ pdns_api_proto }}://localhost:{{ pdns_api_port }}/api/v1/servers/localhost/zones/{{ zone_name }}"
        method: PUT
        body_format: json
        body:
          kind: Master
          rrsets:
            - "{{ record_rrset }}"
        headers:
          X-API-Key: "{{ pdns_api_key }}"
        status_code: 204
      vars:
        zone: "{{ item.0 }}"
        zone_name: "{{ zone.name }}."
        record: "{{ item.1 }}"
        record_name: "{{ record.host }}."
        record_type: "{{ record.type }}"
        record_rrset:
          name: "{{ record_name }}"
          type: "{{ record_type }}"
          ttl: "{{ dns_ttl }}"
          changetype: 'REPLACE'
          records:
            - content: "{{ record['ip-address'] }}"
              disabled: false
              set-ptr: true
      loop_control:
        label: "{{ item.0 }}"
      loop: "{{ pdns_domains | subelements('records') }}"
      when:
        - not record_name in pdns_records
        - record_type != 'PTR'
      tags:
        - records

    - name: update zone records
      uri:
        url: "{{ pdns_api_proto }}://localhost:{{ pdns_api_port }}/api/v1/servers/localhost/zones/{{ zone_name }}"
        method: PATCH
        body_format: json
        body:
          rrsets:
            - "{{ record_rrset }}"
        headers:
          X-API-Key: "{{ pdns_api_key }}"
        status_code: 204
      vars:
        zone: "{{ item.0 }}"
        zone_name: "{{ zone.name }}."
        record: "{{ item.1 }}"
        record_name: "{{ record.host }}."
        record_type: "{{ record.type }}"
        record_rrset:
          name: "{{ record_name }}"
          type: "{{ record_type }}"
          ttl: "{{ dns_ttl }}"
          changetype: 'REPLACE'
          records:
            - content: "{{ record['ip-address'] }}"
              disabled: false
              set-ptr: true
      loop_control:
        label: "{{ item.0 }}"
      loop: "{{ pdns_domains | subelements('records') }}"
      when:
        - not record_name in pdns_records
        - record_type != 'PTR'
      tags:
        - records

    - name: update pdns dns record
      uri:
        url: "{{ pdns_api_proto }}://localhost:{{ pdns_api_port }}/api/v1/servers/localhost/zones/{{ zone }}"
        method: PATCH
        return_content: yes
        body_format: json
        body:
          rrsets:
            - name: "{{ fqdn }}"
              type: A
              ttl: "{{ dns_ttl }}"
              changetype: REPLACE
              records:
                - content: "{{ ansible_default_ipv4.address }}"
                  disabled: no
                  set-ptr: no
                  comments: []
        headers:
          X-API-Key: "{{ pdns_api_key }}"
        status_code: 204
      vars:
        fqdn: "{{ letsencrypt_domain }}."
        record: "{{ letsencrypt_record }}"
        zone: "{{ letsencrypt_zone }}"
      tags:
        - records

    - block:

        - name: query pdns zones
          uri:
            url: "{{ pdns_api_proto }}://localhost:{{ pdns_api_port }}/api/v1/servers/localhost/zones"
            method: GET
            headers:
              X-API-Key: "{{ pdns_api_key }}"
          register: pdns_zones_query
          tags:
            - always

        - name: build list of existing zones
          set_fact:
            pdns_zones: "{{ pdns_zones_query.json | map(attribute='id') | list }}"
          tags:
            - always

        - name: query resolver delegations
          uri:
            url: "https://{{ item }}/api/v1/servers/localhost/zones"
            method: GET
            headers:
              X-API-Key: "{{ pdns_rec_api_key }}"
            validate_certs: no
          loop: "{{ pdns_recursors }}"
          register: pdns_recursor_zones
          tags:
            - recursors

        - name: delete resolver delegations
          uri:
            url: "https://{{ recursor }}/api/v1/servers/localhost/zones/{{ zone_id }}"
            method: DELETE
            status_code:
              - 200
              - 204
            headers:
              X-API-Key: "{{ pdns_rec_api_key }}"
          loop_control:
            label: "{{ recursor }}: {{ zone_name }}"
          vars:
            recursor: "{{ item.0 }}"
            zone_name: "{{ item.1 }}"
            recursor_zones: "{{ pdns_recursor_zones.results | selectattr('item', 'equalto', recursor) | first }}"
            zone_id: "{{ (recursor_zones.json | selectattr('name', 'match', zone_name + '\\.?') | first).id | default('') }}"
          loop: "{{ pdns_recursors | product(pdns_domains | map(attribute='name') | list) | list }}"
          when: zone_id != ''
          tags:
            - recursors

        - name: create resolver delegations
          uri:
            url: "https://{{ recursor }}/api/v1/servers/localhost/zones"
            method: POST
            status_code:
              - 200
              - 201
            body_format: json
            body:
              name: "{{ zone_name }}."
              type: Zone
              kind: Forwarded
              servers: "{{ play_hosts | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | list }}"
              recursion_desired: yes
            headers:
              X-API-Key: "{{ pdns_rec_api_key }}"
          loop_control:
            label: "{{ recursor }}: {{ zone_name }}"
          vars:
            recursor: "{{ item.0 }}"
            zone_name: "{{ item.1 }}"
          loop: "{{ pdns_recursors | product(pdns_domains | map(attribute='name') | list) | list }}"
          tags:
            - recursors

      run_once: yes

  handlers:

    - name: restart pdns
      service:
        name: pdns
        state: restarted

    - name: create route53 txt record for certificate validation
      route53:
        command: create
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        zone: "{{ letsencrypt_zone }}"
        record: "{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]['dns-01']['resource'] }}.{{ letsencrypt_domain }}"
        retry_interval: 300
        type: TXT
        ttl: 7200
        value: '"{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]["dns-01"]["resource_value"] }}"'
        wait: yes
        overwrite: yes
      ignore_errors: yes
      listen: generate certificate

    - name: wait for txt record propagation
      pause:
        seconds: 60
      listen: generate certificate

    - name: validate challenge
      acme_certificate:
        account_key: "{{ letsencrypt_account_keyfile }}"
        challenge: dns-01
        csr: "{{ letsencrypt_domain_csrfile }}"
        dest: "{{ letsencrypt_domain_crtfile }}"
        fullchain_dest: "{{ letsencrypt_domain_chainfile }}"
        data: "{{ letsencrypt_challenge }}"
        terms_agreed: yes
        acme_directory: https://acme-v01.api.letsencrypt.org/directory
      listen: generate certificate

    - name: delete route53 txt record for certificate validation
      route53:
        command: delete
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        zone: "{{ letsencrypt_zone }}"
        record: "{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]['dns-01']['resource'] }}.{{ letsencrypt_zone }}"
        retry_interval: 300
        type: TXT
        ttl: 7200
        value: '"{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]["dns-01"]["resource_value"] }}"'
        wait: yes
      ignore_errors: yes
      listen: generate certificate
