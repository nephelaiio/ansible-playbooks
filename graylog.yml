---
- name: Install and configure graylog server

  hosts: graylog

  become: true

  roles:

    - nephelaiio.plugins

  vars:

    graylog_backend_port: 9000
    graylog_backend_address: 127.0.0.1
    graylog_install_java: no
    graylog_install_mongodb: yes
    graylog_web_endpoint_uri: "{{ graylog_url }}/api"
    es_major_version: "5.x"
    es_version: "5.6.10"
    es_instance_name: "graylog"
    es_scripts: no
    es_templates: no
    es_version_lock: no
    es_heap_size: 1g
    es_cluster_port: 9200
    es_transport_port: 9300
    graylog_backend_proto: http
    es_config:
      node.name: graylog
      cluster.name: graylog
      http.port: "{{ es_cluster_port }}"
      transport.tcp.port: "{{ es_transport_port }}"
      network.host: "{{ graylog_backend_address }}"
      node.data: yes
      node.master: yes
    letsencrypt_basedir: /etc/letsencrypt
    letsencrypt_certdir: "{{ letsencrypt_basedir }}/live"
    letsencrypt_keydir: "{{ letsencrypt_basedir }}/keys"
    letsencrypt_account_keyfile: "{{ letsencrypt_keydir }}/id_rsa.letsencrypt"
    letsencrypt_domain: "{{ graylog_hostname }}"
    letsencrypt_zone: "{{ graylog_hostname | split_with('.') | tail | join('.') }}"
    letsencrypt_domain_keyfile: "{{ letsencrypt_keydir }}/id_rsa.{{ letsencrypt_domain }}"
    letsencrypt_domain_csrfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.csr"
    letsencrypt_domain_crtfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.crt"
    letsencrypt_domain_chainfile: "{{ letsencrypt_certdir }}/{{ letsencrypt_domain }}.chain.crt"

  tasks:

    - name: include private variables
      include_vars:
        dir: "{{ variables }}"

    - name: install graylog
      include_role:
        name: graylog2.graylog

    - name: determine password shasum
      shell: "echo -n {{ graylog_admin_pass }} | shasum -a 256 | cut -d ' ' -f 1"
      register: password_hash
      no_log: yes

    - name: configure graylog
      lineinfile:
        path: /etc/graylog/server/server.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - regexp: "^root_username +="
          line: "root_username = {{ graylog_admin_user }}"
        - regexp: "^root_password_sha2 +="
          line: "root_password_sha2 = {{ password_hash.stdout }}"
      notify: restart graylog

    - meta: flush_handlers

    - name: install package requirements
      package:
        name:
          - python-pip
          - acl
        state: latest

    - name: create letsencrypt folders
      file:
        path: "{{ item }}"
        mode: 0755
        state: directory
      with_items:
        - "{{ letsencrypt_certdir }}"
        - "{{ letsencrypt_keydir }}"

    - name: create key
      shell: 'ssh-keygen -t rsa -b 2048 -C "{{ letsencrypt_email }}" -f {{ letsencrypt_account_keyfile }} -q -N ""'
      args:
        creates: "{{ letsencrypt_account_keyfile }}"

    - name: create domain key
      shell: 'ssh-keygen -t rsa -b 2048 -C "{{ letsencrypt_email }}" -f {{ letsencrypt_domain_keyfile }} -q -N ""'
      args:
        creates: "{{ letsencrypt_domain_keyfile }}"

    - name: create csr
      shell: 'openssl req -new -nodes -key {{ letsencrypt_domain_keyfile }} -out {{ letsencrypt_domain_csrfile }} -subj "/CN={{ letsencrypt_domain }}"'
      changed_when: false

    - name: create challenge
      letsencrypt:
        account_key: "{{ letsencrypt_account_keyfile }}"
        challenge: dns-01
        csr: "{{ letsencrypt_domain_csrfile }}"
        dest: "{{ letsencrypt_domain_crtfile }}"
        fullchain_dest: "{{ letsencrypt_domain_chainfile }}"
        terms_agreed: yes
        acme_directory: https://acme-v01.api.letsencrypt.org/directory
      register: letsencrypt_challenge

    - name: install pip
      include_role:
        name: nephelaiio.pip

    - name: install route53 dependencies
      pip:
        name: boto

    - name: create route53 txt record for certificate validation
      route53:
        command: create
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        zone: "{{ letsencrypt_zone }}"
        record: "{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]['dns-01']['resource'] }}.{{ letsencrypt_domain }}"
        retry_interval: 300
        type: TXT
        ttl: 7200
        value: '"{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]["dns-01"]["resource_value"] }}"'
        wait: yes
        overwrite: yes
      when: "'challenge_data' in letsencrypt_challenge"
      ignore_errors: yes

    - name: wait for txt record propagation
      pause:
        seconds: 60
      when: "'challenge_data' in letsencrypt_challenge"

    - name: validate challenge
      letsencrypt:
        account_key: "{{ letsencrypt_account_keyfile }}"
        challenge: dns-01
        csr: "{{ letsencrypt_domain_csrfile }}"
        dest: "{{ letsencrypt_domain_crtfile }}"
        fullchain_dest: "{{ letsencrypt_domain_chainfile }}"
        data: "{{ letsencrypt_challenge }}"
        terms_agreed: yes
        acme_directory: https://acme-v01.api.letsencrypt.org/directory
      when: "'challenge_data' in letsencrypt_challenge"

    - name: delete route53 txt record for certificate validation
      route53:
        command: delete
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        zone: "{{ letsencrypt_zone }}"
        record: "{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]['dns-01']['resource'] }}.{{ letsencrypt_zone }}"
        retry_interval: 300
        type: TXT
        ttl: 7200
        value: '"{{ letsencrypt_challenge.challenge_data[letsencrypt_domain]["dns-01"]["resource_value"] }}"'
        wait: yes
      when: "'challenge_data' in letsencrypt_challenge"
      ignore_errors: yes

    - name: install nginx
      include_role:
        name: geerlingguy.nginx
      vars:
        nginx_remove_default_vhost: true
        nginx_vhosts:
          - listen: 80
            server_name: "{{ graylog_hostname }}"
            filename: "{{ graylog_hostname }}.http.conf"
            access_log: "/var/log/nginx/{{ graylog_hostname }}.access.log"
            error_log: "/var/log/nginx/{{ graylog_hostname }}.error.log"
            extra_parameters: |
              return 301 https://{{ graylog_hostname }}$request_uri;
          - listen: "443 ssl"
            server_name: "{{ graylog_hostname }}"
            filename: "{{ graylog_hostname }}.https.conf"
            access_log: "/var/log/nginx/{{ graylog_hostname }}.access.log"
            error_log: "/var/log/nginx/{{ graylog_hostname }}.error.log"
            extra_parameters: |
              keepalive_timeout   300;
              ssl_certificate {{ letsencrypt_domain_chainfile }};
              ssl_certificate_key {{ letsencrypt_domain_keyfile }};
              ssl_session_cache   shared:SSL:10m;
              ssl_session_timeout 10m;
              ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
              ssl_prefer_server_ciphers on;
              ssl_stapling on;
              ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA;
              add_header Strict-Transport-Security max-age=31536000;
              add_header X-Frame-Options DENY;
              proxy_cache off;
              proxy_store off;
              location / {
                proxy_pass {{ graylog_backend_proto }}://{{ graylog_backend_address }}:{{ graylog_backend_port }}/;
                proxy_http_version 1.1;
                proxy_set_header   Host               $host;
                proxy_set_header   X-Real-IP          $remote_addr;
                proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
                proxy_set_header   X-Forwarded-Proto  $scheme;
                proxy_set_header   Upgrade            $http_upgrade;
                proxy_set_header   Connection         "upgrade";
              }

    - name: update graylog pdns record
      uri:
        url: "{{ pdns_url }}/api/v1/servers/localhost/zones/{{ graylog_url_zone }}"
        method: PATCH
        return_content: yes
        body_format: json
        body:
          rrsets:
            - name: "{{ graylog_url_host }}"
              type: A
              ttl: 3600
              changetype: REPLACE
              records:
                - content: "{{ ansible_default_ipv4.address }}"
                  disabled: no
                  set-ptr: no
                  comments: []
        headers:
          X-API-Key: "{{ pdns_api_key }}"
        status_code: 204
      vars:
        graylog_url_host: "{{ graylog_url | urlsplit('hostname') }}."
        graylog_url_zone: "{{ graylog_url_host | split_with('.') | tail | join('.') }}"
      register: pdns_zones_query

  handlers:

    - name: restart graylog
      service:
        name: graylog-server
        state: restarted


- name: Install and configure graylog syslog forwarding

  hosts:
    - nuc
    - raspberry

  become: true

  roles:

    - nephelaiio.plugins

  tasks:

    - name: include private variables
      include_vars:
        dir: "{{ variables }}"

    - name: configure rsyslog
      copy:
        dest: /etc/rsyslog.d/10-fqdn.conf
        content: "$PreserveFQDN on"
      notify: restart rsyslog

    - name: configure rsyslog
      template:
        src: graylog/rsyslog.conf.j2
        dest: /etc/rsyslog.d/80-graylog.conf
      vars:
        graylog_host: "{{ graylog_hostname }}"
        graylog_port: "{{ graylog_syslog_port }}"
      notify: restart rsyslog

    - name: configure rsyslog
      file:
        path: /etc/rsyslog.d/70-papertrail.conf
        state: absent
      notify: restart rsyslog

  handlers:

    - name: restart rsyslog
      service:
        name: rsyslog
        state: restarted
