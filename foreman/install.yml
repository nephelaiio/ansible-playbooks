---
- name: Install foreman

  hosts: foreman_app

  become: yes

  roles:

    - nephelaiio.plugins

  vars:

    # external variables
    route53_access_key_id: "{{ aws_access_key_id }}"
    route53_secret_access_key: "{{ aws_secret_access_key }}"
    # local variables
    nginx_user: www-data
    foreman_db_host: 127.0.0.1
    # foreman app variables
    foreman_permissions_reset: no
    foreman_api_allpages: 9999999999

  pre_tasks:

    - name: include private variables
      include_vars:
        dir: "../{{ variables }}"
      run_once: yes

    - include_tasks: ../letsencrypt.yml
      vars:
        acme_certificate_group_members:
          - "{{ foreman_group }}"

  tasks:

    - name: install foreman apt key
      apt_key:
        url: https://deb.theforeman.org/pubkey.gpg
        id: 6F8600B9563278F6

    - name: install foreman apt repository
      apt_repository:
        repo: "deb http://deb.theforeman.org/ bionic {{ foreman_release }}"
        state: present
        update_cache: yes

    - name: install foreman packages
      package:
        name:
          - foreman
          - foreman-cli
          - foreman-ec2
          - foreman-console
          - foreman-mysql2
          - ruby-hammer-cli
          - ruby-hammer-cli-foreman

    - name: install mysql
      include_role:
        name: geerlingguy.mysql
      vars:
        mysql_databases:
          - name: "{{ foreman_db_name }}"
        mysql_users:
          - name: "{{ foreman_db_user }}"
            password: "{{ foreman_db_pass }}"
            priv: "{{ foreman_db_name }}.*:ALL"
        mysql_bind_address: "{{ foreman_db_host }}"

    - name: configure database
      copy:
        dest: /etc/foreman/database.yml
        content: |
          {{ database_yaml | to_nice_yaml(indent=2) }}
        mode: 0640
        owner: "{{ foreman_user }}"
        group: "{{ foreman_group }}"
      vars:
        database_yaml:
          production:
            adapter: mysql2
            database: "{{ foreman_db_name }}"
            username: "{{ foreman_db_user }}"
            password: "{{ foreman_db_pass }}"
            host: "{{ foreman_db_host }}"
      notify: rake

    - meta: flush_handlers

    - name: configure settings
      copy:
        dest: /etc/foreman/settings.yaml
        content: |
          {{ settings_yaml | to_nice_yaml(indent=2) }}
        mode: 0640
        owner: "{{ foreman_user }}"
        group: "{{ foreman_group }}"
      vars:
        settings_yaml: "{{ foreman_settings }}"
      notify: restart nginx

    - name: install nginx / passenger
      include_role:
        name: geerlingguy.passenger
      vars:
        passenger_server_name: "{{ foreman_hostname }}"
        passenger_app_env: production
        passenger_app_root: /usr/share/foreman/public

    - name: fix nginx settings
      lineinfile:
        dest: /etc/nginx/nginx.conf
        regexp: ".*server_names_hash_bucket_size.*"
        line: "server_names_hash_bucket_size 64;"
      notify: restart nginx

    - name: add nginx user to foreman group
      user:
        name: "{{ nginx_user }}"
        group: "{{ foreman_group }}"
        append: yes
      notify: restart nginx

    - name: update foreman pdns record
      uri:
        url: "{{ pdns_url }}/api/v1/servers/localhost/zones/{{ foreman_url_zone }}"
        method: PATCH
        return_content: yes
        body_format: json
        body:
          rrsets:
            - name: "{{ foreman_url_host }}"
              type: A
              ttl: 3600
              changetype: REPLACE
              records:
                - content: "{{ ansible_default_ipv4.address }}"
                  disabled: no
                  set-ptr: no
                  comments: []
        headers:
          X-API-Key: "{{ pdns_api_key }}"
        status_code: 204
      vars:
        foreman_url_host: "{{ foreman_hostname }}."
        foreman_url_zone: "{{ foreman_domain }}"

    - name: create nginx vhost file
      copy:
        dest: "/etc/nginx/sites-enabled/{{ acme_certificate_domain }}.https.conf"
        content: |
          server {
            listen  443 ssl;
            server_name {{ acme_certificate_domain }};

            access_log /var/log/nginx/{{ acme_certificate_domain }}.access.log;
            error_log /var/log/nginx/{{ acme_certificate_domain }}.error.log;

            keepalive_timeout   300;
            ssl_certificate {{ acme_certificate_domain_chainfile }};
            ssl_certificate_key {{ acme_certificate_domain_keyfile }};
            ssl_session_cache   shared:SSL:10m;
            ssl_session_timeout 10m;
            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
            ssl_prefer_server_ciphers on;
            ssl_stapling on;
            ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA;
            charset utf-8;
            gzip on;
            gzip_types text/css application/javascript text/javascript application/x-javascript image/svg+xml text/plain text/xsd text/xsl text/xml image/x-icon;

            location / {
              proxy_pass http://{{ acme_certificate_domain }}/;
              proxy_http_version 1.1;
              proxy_set_header   Host               $host;
              proxy_set_header   X-Real-IP          $remote_addr;
              proxy_set_header   X-Forwarded-For    $proxy_add_x_forwarded_for;
              proxy_set_header   X-Forwarded-Proto  $scheme;
              proxy_set_header   Upgrade            $http_upgrade;
              proxy_set_header   Connection         "upgrade";
            }
          }
      notify: restart nginx

    - meta: flush_handlers

    - name: query foreman users
      uri:
        url: "{{ foreman_url }}/api/users"
        method: GET
        body_format: json
        body:
          per_page: "{{ foreman_api_allpages }}"
        force_basic_auth: yes
        user: "{{ foreman_admin_user }}"
        password: "{{ foreman_admin_pass }}"
      register: foreman_user_query
      ignore_errors: yes

    - name: rake permissions:reset
      command: foreman-rake permissions:reset
      register: handler_permissions_reset
      when: foreman_user_query is failed

    - name: override admin credentials
      set_fact:
        foreman_permissions_reset: true
        reset_admin_user: "{{ ((handler_permissions_reset.stdout | split_with(' '))[3])[0:-1] }}"
        reset_admin_pass: "{{ (handler_permissions_reset.stdout | split_with(' '))[5] }}"
      when: foreman_user_query is failed

    - name: query foreman users
      uri:
        url: "{{ foreman_url }}/api/users"
        method: GET
        body_format: json
        body:
          per_page: "{{ foreman_api_allpages }}"
        force_basic_auth: yes
        user: "{{ reset_admin_user }}"
        password: "{{ reset_admin_pass }}"
      register: foreman_reset_query
      when: foreman_user_query is failed

    - name: set admin user facts
      set_fact:
        foreman_admin: "{{ foreman_reset_query.json.results | selectattr('login', 'equalto', foreman_admin_user) |  first }}"
        foreman_reset:
          password: "{{ foreman_admin_pass }}"
      when: foreman_user_query is failed

    - name: set admin foreman password
      uri:
        url: "{{ foreman_url }}/api/users/{{ foreman_admin.id }}"
        method: PUT
        body_format: json
        body:
          user:
            current_password: "{{ reset_admin_pass }}"
            password: "{{ foreman_admin_pass }}"
            password_confirmation: "{{ foreman_admin_pass }}"
        force_basic_auth: yes
        user: "{{ reset_admin_user }}"
        password: "{{ reset_admin_pass }}"
      when: foreman_user_query is failed

    - block:

        - name: query foreman organizations
          uri:
            url: "{{ foreman_url }}/api/organizations"
            method: GET
            body_format: json
            body:
              per_page: "{{ foreman_api_allpages }}"
            force_basic_auth: yes
            user: "{{ foreman_admin_user }}"
            password: "{{ foreman_admin_pass }}"
          register: foreman_organization_query

        - name: set organization facts
          set_fact:
            foreman_organization_names: "{{ foreman_organization_query.json.results | map(attribute='name') | list }}"
            foreman_organization_results: "{{ foreman_organization_query.json.results }}"

        - name: destroy default organization
          uri:
            url: "{{ foreman_url }}/api/organizations/{{ organization_id }}"
            method: DELETE
            body_format: json
            user: "{{ foreman_api_user }}"
            password: "{{ foreman_api_pass }}"
            force_basic_auth: yes
            status_code: 200
          vars:
            organization_id: "{{ foreman_organization.id }}"
          loop_control:
            loop_var: foreman_organization
            label: "{{ foreman_organization.name }}"
          with_items: "{{ foreman_organization_results | selectattr('name', 'equalto', 'Default Organization') | list }}"

        - name: create foreman organizations
          uri:
            url: "{{ foreman_url }}/api/organizations"
            method: POST
            body_format: json
            body:
              organization:
                name: "{{ item.name }}"
            user: "{{ foreman_api_user }}"
            password: "{{ foreman_api_pass }}"
            force_basic_auth: yes
            status_code: 201
          with_items: "{{ foreman_organizations.values() | list }}"
          when: item.name not in foreman_organization_names

        - name: query foreman organizations
          uri:
            url: "{{ foreman_url }}/api/organizations"
            method: GET
            body_format: json
            body:
              per_page: "{{ foreman_api_allpages }}"
            force_basic_auth: yes
            user: "{{ foreman_admin_user }}"
            password: "{{ foreman_admin_pass }}"
          register: foreman_organization_query

        - name: query foreman locations
          uri:
            url: "{{ foreman_url }}/api/locations"
            method: GET
            body_format: json
            body:
              per_page: "{{ foreman_api_allpages }}"
            force_basic_auth: yes
            user: "{{ foreman_admin_user }}"
            password: "{{ foreman_admin_pass }}"
          register: foreman_location_query

        - name: set organization/location facts
          set_fact:
            foreman_organization_names: "{{ foreman_organization_query.json.results | map(attribute='name') | list }}"
            foreman_organization_results: "{{ foreman_organization_query.json.results }}"
            foreman_location_names: "{{ foreman_location_query.json.results | map(attribute='name') | list }}"
            foreman_location_results: "{{ foreman_location_query.json.results }}"

        - name: destroy default location
          uri:
            url: "{{ foreman_url }}/api/locations/{{ location_id }}"
            method: DELETE
            body_format: json
            user: "{{ foreman_api_user }}"
            password: "{{ foreman_api_pass }}"
            force_basic_auth: yes
            status_code: 200
          vars:
            location_id: "{{ foreman_location.id }}"
          loop_control:
            loop_var: foreman_location
            label: "{{ foreman_location.name }}"
          with_items: "{{ foreman_location_results | selectattr('name', 'equalto', 'Default Location') | list }}"

        - name: create foreman locations
          uri:
            url: "{{ foreman_url }}/api/locations"
            method: POST
            body_format: json
            body:
              location:
                name: "{{ item.name }}"
                organization_id: "{{ organization_id }}"
            user: "{{ foreman_api_user }}"
            password: "{{ foreman_api_pass }}"
            force_basic_auth: yes
            status_code: 201
          vars:
            organization_id: "{{ foreman_organization_results | selectattr('name', 'equalto', item.organization) | map(attribute='name') | first }}"
          with_items: "{{ foreman_locations.values() | list }}"
          when: item.name not in foreman_location_names

      delegate_to: localhost

    - name: notify of credential changes
      debug:
        msg: "{{ handler_permissions_reset.stdout }}"
      when: foreman_permissions_reset

  handlers:

    - name: restart nginx
      service:
        name: nginx
        state: restarted

    - name: rake migrate
      command: foreman-rake db:migrate
      listen: rake

    - name: rake seed
      command: foreman-rake db:seed
      listen: rake

    - name: rake apipie
      command: foreman-rake apipie:cache
      listen: rake
