---
- name: Configure foreman hosts

  hosts: foreman_guests

  gather_facts: no

  become: yes

  roles:

    - nephelaiio.plugins

  tasks:

    - block:

        - name: include private variables
          include_vars:
            dir: "../{{ variables }}"

        - name: query foreman organizations
          uri:
            url: "{{ foreman_url }}/api/organizations"
            method: GET
            body_format: json
            body:
              per_page: "{{ foreman_api_allpages }}"
            force_basic_auth: yes
            user: "{{ foreman_admin_user }}"
            password: "{{ foreman_admin_pass }}"
          register: foreman_organization_query

        - name: query foreman locations
          uri:
            url: "{{ foreman_url }}/api/locations"
            method: GET
            body_format: json
            body:
              per_page: "{{ foreman_api_allpages }}"
            force_basic_auth: yes
            user: "{{ foreman_admin_user }}"
            password: "{{ foreman_admin_pass }}"
          register: foreman_location_query

        - name: set organization/location facts
          set_fact:
            foreman_organization_results: "{{ foreman_organization_query.json.results }}"
            foreman_location_results: "{{ foreman_location_query.json.results }}"

        - name: set organization dict
          set_fact:
            foreman_organization_dict: "{{ (foreman_organization_dict | default({})) | combine({ item.name: item }) }}"
          loop_control:
            label: "{{ item.name }}"
          loop: "{{ foreman_organization_results | flatten(levels=1) }}"

        - name: set location dict
          set_fact:
            foreman_location_dict: "{{ (foreman_location_dict | default({})) | combine({ item.name: item }) }}"
          loop_control:
            label: "{{ item.name }}"
          loop: "{{ foreman_location_results | flatten(levels=1) }}"

        - name: query foreman hostgroups
          uri:
            url: "{{ foreman_url }}/api/hostgroups"
            method: GET
            body_format: json
            body:
              per_page: "{{ foreman_api_allpages }}"
            user: "{{ foreman_api_user }}"
            password: "{{ foreman_api_pass }}"
            force_basic_auth: yes
            status_code: 200
          register: foreman_hostgroup_query

        - name: set hostgroup facts
          set_fact:
            foreman_hostgroup_results: "{{ foreman_hostgroup_query.json.results | list }}"

        - name: query foreman hosts
          uri:
            url: "{{ foreman_url }}/api/hosts"
            method: GET
            body_format: json
            body:
              per_page: "{{ foreman_api_allpages }}"
            user: "{{ foreman_api_user }}"
            password: "{{ foreman_api_pass }}"
            force_basic_auth: yes
            status_code: 200
          register: foreman_host_query
          run_once: yes

        - name: set host facts
          set_fact:
            foreman_host_results: "{{ foreman_host_query.json.results | list }}"
            foreman_host_names: "{{ foreman_host_query.json.results | map(attribute='name') | list }}"
            foreman_host_ips: "{{ foreman_host_query.json.results | map(attribute='ip') | list }}"
          run_once: yes

        - name: create foreman host
          uri:
            url: "{{ foreman_url }}/api/hosts"
            method: POST
            body_format: json
            body:
              host:
                name: "{{ inventory_hostname }}"
                hostgroup_id: "{{ foreman_host_hostgroup.id }}"
                ip: "{{ ansible_host }}"
                mac: "{{ hw_address }}"
                organization_id: "{{ foreman_organization_dict[foreman_organization].id }}"
                location_id: "{{ foreman_location_dict[foreman_location].id }}"
                host_parameters_attributes: "{{ foreman_host_parameters | default(omit) }}"
            user: "{{ foreman_api_user }}"
            password: "{{ foreman_api_pass }}"
            force_basic_auth: yes
            status_code: 201
          vars:
            foreman_host_hostgroup: "{{ foreman_hostgroup_results | selectattr('name', 'equalto', foreman_hostgroup) | first }}"
          when: inventory_hostname not in foreman_host_names

        - block:

            - name: delete foreman host
              uri:
                url: "{{ foreman_url }}/api/hosts/{{ foreman_host.id }}"
                method: DELETE
                body_format: json
                user: "{{ foreman_api_user }}"
                password: "{{ foreman_api_pass }}"
                force_basic_auth: yes
                status_code: 200
              vars:
                foreman_host: "{{ foreman_host_results | selectattr('name', 'equalto', inventory_hostname) | first }}"

            - name: recreate foreman host
              uri:
                url: "{{ foreman_url }}/api/hosts"
                method: POST
                body_format: json
                body:
                  host:
                    name: "{{ inventory_hostname }}"
                    hostgroup_id: "{{ foreman_host_hostgroup.id }}"
                    ip: "{{ ansible_host }}"
                    mac: "{{ hw_address }}"
                    organization_id: "{{ foreman_organization_dict[foreman_organization].id }}"
                    location_id: "{{ foreman_location_dict[foreman_location].id }}"
                    host_parameters_attributes: "{{ foreman_host_parameters | default(omit) }}"
                user: "{{ foreman_api_user }}"
                password: "{{ foreman_api_pass }}"
                force_basic_auth: yes
                status_code: 201
              vars:
                foreman_host_hostgroup: "{{ foreman_hostgroup_results | selectattr('name', 'equalto', foreman_hostgroup) | first }}"

          when: inventory_hostname in foreman_host_names

      delegate_to: localhost

    - block:

        - name: set pxelinux facts
          set_fact:
            pxelinux_target: "{{ foreman_tftp_root }}/pxelinux.cfg/01-{{ hw_address | regex_replace(':', '-') }}"

        - name: check pxelinux file
          stat:
            path: "{{ pxelinux_target }}"
          register: pxelinux_stat
          delegate_to: "{{ item }}"
          loop: "{{ groups['foreman_proxy'] | flatten(levels=1) }}"

        - name: create guid symlink
          file:
            dest: "{{ foreman_tftp_root }}/pxelinux.cfg/{{ guid }}"
            src: "{{ pxelinux_target }}"
            state: link
          delegate_to: "{{ foreman_proxy }}"
          vars:
            foreman_proxy: "{{ item.item }}"
          loop_control:
            label: "{{ foreman_proxy }}"
          loop: "{{ pxelinux_stat.results | flatten(levels=1) }}"
          when:
            - item.stat.exists

      when:
        - guid is defined
